"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4184],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>p,MDXProvider:()=>c,mdx:()=>f,useMDXComponents:()=>m,withMDXComponents:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){return function(t){var n=m(t.components);return a.createElement(e,o({},t,{components:n}))}},m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=m(n),c=r,u=d["".concat(i,".").concat(c)]||d[c]||h[c]||o;return n?a.createElement(u,l(l({ref:t},p),{},{components:n})):a.createElement(u,l({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},56281:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={},i="Bxl support for performing analysis on targets",l={unversionedId:"rfcs/bxl-analysis",id:"rfcs/bxl-analysis",title:"Bxl support for performing analysis on targets",description:"Intro",source:"@site/../docs/rfcs/bxl-analysis.md",sourceDirName:"rfcs",slug:"/rfcs/bxl-analysis",permalink:"/docs/rfcs/bxl-analysis",draft:!1,tags:[],version:"current",frontMatter:{}},s={},p=[{value:"Intro",id:"intro",level:2},{value:"How to implement it?",id:"how-to-implement-it",level:2}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"bxl-support-for-performing-analysis-on-targets"},"Bxl support for performing analysis on targets"),(0,r.mdx)("h2",{id:"intro"},"Intro"),(0,r.mdx)("p",null,"As Bob and I continue to build out ",(0,r.mdx)("inlineCode",{parentName:"p"},"bxl")," we want users to be able to inspect the providers and actions for a given target label.  In order to support this, we need to be able to provide access to ",(0,r.mdx)("inlineCode",{parentName:"p"},"AnalysisResult")," via ",(0,r.mdx)("inlineCode",{parentName:"p"},"starlark"),", obtained via a call to ",(0,r.mdx)("inlineCode",{parentName:"p"},"RuleAnalysisCalculation::get_analysis_result"),"."),(0,r.mdx)("h2",{id:"how-to-implement-it"},"How to implement it?"),(0,r.mdx)("p",null,"Our three principle options are as follows:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("inlineCode",{parentName:"li"},"BxlContext::analyze(targetlabel: ConfiguredTargetLabelLike)"),", where ",(0,r.mdx)("inlineCode",{parentName:"li"},"ConfiguredTargetLabelLike")," accepts ",(0,r.mdx)("inlineCode",{parentName:"li"},"ConfiguredTargetLabel"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"ConfiguredTargetNode"),", or sets and lists of these things + acceptable strings.")),(0,r.mdx)("p",null,"In this scenario, we attach the analysis method onto the bxl context itself, and require that users pass in the target label-ish thing when they want to construct an analysis result.  It's a little awkward in some ways because the analysis is more naturally a method on the argument being passed in and the ",(0,r.mdx)("inlineCode",{parentName:"p"},"BxlContext")," is a context that is needed to perform the calculation.  On the other hand, this allows us to construct a type analogous to ",(0,r.mdx)("inlineCode",{parentName:"p"},"TargetExpr")," which can parse from a wide variety of different ",(0,r.mdx)("inlineCode",{parentName:"p"},"ConfiguredTarget")," like things (strings, nodes, labels, sets, ...).  It also is a bit nice from an implementational standpoint since we don't have to pass the context around everywhere.  This isn't a huge pro though, since we can stick it in the global eval field."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'result = bxl.analyze(bxl.cquery.deps("foo"))\n')),(0,r.mdx)("ol",{start:2},(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("inlineCode",{parentName:"li"},"ConfiguredTargetLabel::analyze()"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"ConfiguredTargetNode::analyze()"),", ... where we carry around the ",(0,r.mdx)("inlineCode",{parentName:"li"},"BxlContext")," in the ",(0,r.mdx)("inlineCode",{parentName:"li"},"eval")," global field and implement analysis on each type that is target label like.")),(0,r.mdx)("p",null,"The pro of this one is that it's quite natural - you can take a ",(0,r.mdx)("inlineCode",{parentName:"p"},"ConfiguredStarlarkTargetLabel")," and then just ... call ",(0,r.mdx)("inlineCode",{parentName:"p"},"analyze()")," on it like you might expect to.  The two downsides are that we have to propagate the context around behind the scenes, and we'll have to provide an implementation of ",(0,r.mdx)("inlineCode",{parentName:"p"},"analyze")," on everything that we'd like to have be able to be ",(0,r.mdx)("inlineCode",{parentName:"p"},"analyzable"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'result = "root//bin:the_binary".analyze()\n# but we don\'t support\n"root//bin:the_binary".rdeps()\n\n\n# instead this looks nice\nnodes = ctx.cquery.deps("foo")\nfor n in nodes:\n  # since we can now do\n  nodes.label\n  nodes.attrs.field\n\n  # similarly access analysis\n  nodes.analysis\n')),(0,r.mdx)("ol",{start:3},(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("inlineCode",{parentName:"li"},"BxlContext::analysis(): AnalysisContext")," where ",(0,r.mdx)("inlineCode",{parentName:"li"},"AnalysisContext")," exposes ",(0,r.mdx)("inlineCode",{parentName:"li"},"AnalysisContext::analyze(targetlabel: ConfiguredTargetLabelLike)"),".")),(0,r.mdx)("p",null,"There's not really any pros of this approach except that it's similar to the flow for ",(0,r.mdx)("inlineCode",{parentName:"p"},"cquery")," where we return a ",(0,r.mdx)("inlineCode",{parentName:"p"},"cqueryctx")," object to call ",(0,r.mdx)("inlineCode",{parentName:"p"},"cquery")," methods through."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'result = ctx.analysis().analyze("//lib:file1")\n')),(0,r.mdx)("p",null,"We can also restrict the API to require that users go through ",(0,r.mdx)("inlineCode",{parentName:"p"},"cquery")," to obtain a ",(0,r.mdx)("inlineCode",{parentName:"p"},"ConfiguredTargetNode")," prior to calling ",(0,r.mdx)("inlineCode",{parentName:"p"},"analysis"),", although we don't ",(0,r.mdx)("em",{parentName:"p"},"have to"),".  I say that we don't have to because the ",(0,r.mdx)("inlineCode",{parentName:"p"},"get_analysis_result")," method mentioned above is configured to accept a label anyway."))}m.isMDXComponent=!0}}]);