"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8778],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>u,MDXProvider:()=>s,mdx:()=>x,useMDXComponents:()=>p,withMDXComponents:()=>c});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i.apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),c=function(e){return function(n){var t=p(n.components);return r.createElement(e,i({},n,{components:t}))}},p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=d(e,["components","mdxType","originalType","parentName"]),c=p(t),s=a,m=c["".concat(l,".").concat(s)]||c[s]||f[s]||i;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function x(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=g;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[m]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},42249:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=t(87462),a=(t(67294),t(3905));const i={},l="Buck support to implement configured_alias",o={unversionedId:"rfcs/configured-alias",id:"rfcs/configured-alias",title:"Buck support to implement configured_alias",description:"Intro",source:"@site/../docs/rfcs/configured-alias.md",sourceDirName:"rfcs",slug:"/rfcs/configured-alias",permalink:"/docs/rfcs/configured-alias",draft:!1,tags:[],version:"current",frontMatter:{}},d={},u=[{value:"Intro",id:"intro",level:2},{value:"What is <code>configured_alias</code>?",id:"what-is-configured_alias",level:2},{value:"How to implement it in buck v2?",id:"how-to-implement-it-in-buck-v2",level:2},{value:"New rule attribute type: <code>configured_dep</code>",id:"new-rule-attribute-type-configured_dep",level:3},{value:"<code>configured_alias_impl</code> user defined rule",id:"configured_alias_impl-user-defined-rule",level:3},{value:"Finally, <code>configured_alias</code> macro",id:"finally-configured_alias-macro",level:3},{value:"Alternatives",id:"alternatives",level:2},{value:"No <code>configured_alias</code>",id:"no-configured_alias",level:3},{value:"Use <code>@configuration</code> syntax from another RFC.",id:"use-configuration-syntax-from-another-rfc",level:3},{value:"Accept <code>configured_target_label</code> in <code>dep</code> attribute",id:"accept-configured_target_label-in-dep-attribute",level:3}],c={toc:u};function p(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"buck-support-to-implement-configured_alias"},"Buck support to implement ",(0,a.mdx)("inlineCode",{parentName:"h1"},"configured_alias")),(0,a.mdx)("h2",{id:"intro"},"Intro"),(0,a.mdx)("p",null,"Currently, Buck 2 lacks ",(0,a.mdx)("inlineCode",{parentName:"p"},"configured_alias")," rule support."),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"configured_alias")," is a builtin rule in Buck v1, and it cannot be currently\nimplemented as user defined rule in Buck v2."),(0,a.mdx)("p",null,"This RFC proposes Buck core support for ",(0,a.mdx)("inlineCode",{parentName:"p"},"configured_alias"),"."),(0,a.mdx)("h2",{id:"what-is-configured_alias"},"What is ",(0,a.mdx)("inlineCode",{parentName:"h2"},"configured_alias"),"?"),(0,a.mdx)("p",null,"Syntax is this:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'configured_alias(\n    name = "foo-but-linux-release",\n    actual = ":foo",\n    platform = "config//platforms:linux-release",\n)\n')),(0,a.mdx)("p",null,'When this rule is built, it ignores "current" target configuration,\nand builds the "actual" target with the configuration specified as "platform" argument.'),(0,a.mdx)("h2",{id:"how-to-implement-it-in-buck-v2"},"How to implement it in buck v2?"),(0,a.mdx)("h3",{id:"new-rule-attribute-type-configured_dep"},"New rule attribute type: ",(0,a.mdx)("inlineCode",{parentName:"h3"},"configured_dep")),(0,a.mdx)("p",null,"Currently, we have several dependency attributes:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"attrs.dep")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"attrs.exec_dep")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"attrs.transition_dep")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"attrs.split_transition_dep"))),(0,a.mdx)("p",null,"This RFC proposes adding another attribute:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"attrs.configured_dep"))),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"configured_dep")," is an attribute which accepts a pair of strings: target and configuration.\nDuring analysis, configured attr deps are resolved to providers resolved using given configuration."),(0,a.mdx)("h3",{id:"configured_alias_impl-user-defined-rule"},(0,a.mdx)("inlineCode",{parentName:"h3"},"configured_alias_impl")," user defined rule"),(0,a.mdx)("p",null,"The rule implementation is trivial:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'\ndef _configured_alias_impl(ctx):\n    return ctx.attrs.actual.providers\n\nconfigured_alias_impl = rule(\n    impl = _configured_alias_impl,\n    attrs = {\n        "actual": attrs.configured_dep(),\n    }\n)\n')),(0,a.mdx)("h3",{id:"finally-configured_alias-macro"},"Finally, ",(0,a.mdx)("inlineCode",{parentName:"h3"},"configured_alias")," macro"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def configured_alias(name, actual, platform):\n    configured_alias_impl(name, actual = (actual, platform))\n")),(0,a.mdx)("h2",{id:"alternatives"},"Alternatives"),(0,a.mdx)("h3",{id:"no-configured_alias"},"No ",(0,a.mdx)("inlineCode",{parentName:"h3"},"configured_alias")),(0,a.mdx)("p",null,"Each specific case where ",(0,a.mdx)("inlineCode",{parentName:"p"},"configured_alias")," is used, it can be done with defining\ncustom transition, and using custom transition rule."),(0,a.mdx)("p",null,"But having ",(0,a.mdx)("inlineCode",{parentName:"p"},"configured_alias")," is a convenient stopgap to unblock people."),(0,a.mdx)("h3",{id:"use-configuration-syntax-from-another-rfc"},"Use ",(0,a.mdx)("inlineCode",{parentName:"h3"},"@configuration")," syntax from ",(0,a.mdx)("a",{parentName:"h3",href:"https://www.internalfb.com/diff/D35136639"},"another RFC"),"."),(0,a.mdx)("p",null,"Instead of passing ",(0,a.mdx)("inlineCode",{parentName:"p"},"confiured_target_label(x, y)")," pass ",(0,a.mdx)("inlineCode",{parentName:"p"},'x + "@" + y'),"."),(0,a.mdx)("h3",{id:"accept-configured_target_label-in-dep-attribute"},"Accept ",(0,a.mdx)("inlineCode",{parentName:"h3"},"configured_target_label")," in ",(0,a.mdx)("inlineCode",{parentName:"h3"},"dep")," attribute"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"dep")," attribute could support all of:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"regular target label as string"),(0,a.mdx)("li",{parentName:"ul"},"configured target label (as either ",(0,a.mdx)("inlineCode",{parentName:"li"},"configured_target_label")," or ",(0,a.mdx)("inlineCode",{parentName:"li"},"x@y"))),(0,a.mdx)("p",null,"I don't know practical applications for this magic,\nand unless there are uses for it, better keep API simple and explicit."))}p.isMDXComponent=!0}}]);