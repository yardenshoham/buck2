"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5343],{3905:(t,e,a)=>{a.r(e),a.d(e,{MDXContext:()=>s,MDXProvider:()=>h,mdx:()=>f,useMDXComponents:()=>c,withMDXComponents:()=>u});var i=a(67294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(){return r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(t[i]=a[i])}return t},r.apply(this,arguments)}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,i)}return a}function p(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function l(t,e){if(null==t)return{};var a,i,n=function(t,e){if(null==t)return{};var a,i,n={},r=Object.keys(t);for(i=0;i<r.length;i++)a=r[i],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(i=0;i<r.length;i++)a=r[i],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var s=i.createContext({}),u=function(t){return function(e){var a=c(e.components);return i.createElement(t,r({},e,{components:a}))}},c=function(t){var e=i.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):p(p({},e),t)),a},h=function(t){var e=c(t.components);return i.createElement(s.Provider,{value:e},t.children)},m="mdxType",_={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},d=i.forwardRef((function(t,e){var a=t.components,n=t.mdxType,r=t.originalType,o=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),u=c(a),h=n,m=u["".concat(o,".").concat(h)]||u[h]||_[h]||r;return a?i.createElement(m,p(p({ref:e},s),{},{components:a})):i.createElement(m,p({ref:e},s))}));function f(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var r=a.length,o=new Array(r);o[0]=d;var p={};for(var l in e)hasOwnProperty.call(e,l)&&(p[l]=e[l]);p.originalType=t,p[m]="string"==typeof t?t:n,o[1]=p;for(var s=2;s<r;s++)o[s]=a[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,a)}d.displayName="MDXCreateElement"},97019:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var i=a(87462),n=(a(67294),a(3905));const r={id:"get_paths_without_materialization"},o="get_paths_without_materialization type",p={unversionedId:"api/bxl/get_paths_without_materialization",id:"api/bxl/get_paths_without_materialization",title:"get_paths_without_materialization type",description:"get\\paths\\without\\materialization.get\\paths\\without\\materialization",source:"@site/../docs/api/bxl/get_paths_without_materialization.generated.md",sourceDirName:"api/bxl",slug:"/api/bxl/get_paths_without_materialization",permalink:"/docs/api/bxl/get_paths_without_materialization",draft:!1,tags:[],version:"current",frontMatter:{id:"get_paths_without_materialization"},sidebar:"manualSidebar",previous:{title:"get_path_without_materialization type",permalink:"/docs/api/bxl/get_path_without_materialization"},next:{title:"instant type",permalink:"/docs/api/bxl/instant"}},l={},s=[{value:"get_paths_without_materialization.get_paths_without_materialization",id:"get_paths_without_materializationget_paths_without_materialization",level:2}],u={toc:s};function c(t){let{components:e,...a}=t;return(0,n.mdx)("wrapper",(0,i.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,n.mdx)("h1",{id:"get_paths_without_materialization-type"},(0,n.mdx)("inlineCode",{parentName:"h1"},"get_paths_without_materialization")," type"),(0,n.mdx)("h2",{id:"get_paths_without_materializationget_paths_without_materialization"},"get","_","paths","_","without","_","materialization.get","_","paths","_","without","_","materialization"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def get_paths_without_materialization.get_paths_without_materialization(\n    this,\n    ctx: "bxl_ctx",\n    *,\n    abs: bool.type = False\n)\n')),(0,n.mdx)("p",null,"The output paths of a ",(0,n.mdx)("inlineCode",{parentName:"p"},"cmd_args()")," inputs. The output paths will be returned as a list. Takes an optional boolean to print the absolute or relative path. Note that this method returns an artifact path without asking for the artifact to be materialized, (i.e. it may not actually exist on the disk yet)."),(0,n.mdx)("p",null,"This is a risky function to call because you may accidentally pass this path to further BXL actions\nthat expect the artifact to be materialized. If this happens, the BXL script will error out.\nIf you want the path without materialization for other uses that don\u2019t involve passing them into\nfurther actions, then it\u2019s safe."),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_get_paths_without_materialization(ctx):\n    node = ctx.configured_targets("root//bin:the_binary")\n    providers = ctx.analysis(node).providers()\n    path = get_paths_without_materialization(providers[RunInfo], abs=True) # Note this artifact is NOT ensured or materialized\n    ctx.output.print(path)\n')))}c.isMDXComponent=!0}}]);