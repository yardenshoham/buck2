"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5066],{3905:(e,n,a)=>{a.r(n),a.d(n,{MDXContext:()=>m,MDXProvider:()=>u,mdx:()=>h,useMDXComponents:()=>p,withMDXComponents:()=>s});var t=a(67294);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e},r.apply(this,arguments)}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function d(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var m=t.createContext({}),s=function(e){return function(n){var a=p(n.components);return t.createElement(e,r({},n,{components:a}))}},p=function(e){var n=t.useContext(m),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},u=function(e){var n=p(e.components);return t.createElement(m.Provider,{value:n},e.children)},c="mdxType",x={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),s=p(a),u=l,c=s["".concat(i,".").concat(u)]||s[u]||x[u]||r;return a?t.createElement(c,o(o({ref:n},m),{},{components:a})):t.createElement(c,o({ref:n},m))}));function h(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=f;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[c]="string"==typeof e?e:l,i[1]=o;for(var m=2;m<r;m++)i[m]=a[m];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}f.displayName="MDXCreateElement"},97643:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var t=a(87462),l=(a(67294),a(3905));const r={id:"globals"},i="globals",o={unversionedId:"api/build/globals",id:"api/build/globals",title:"globals",description:"CommandExecutorConfig",source:"@site/../docs/api/build/globals.generated.md",sourceDirName:"api/build",slug:"/api/build/globals",permalink:"/docs/api/build/globals",draft:!1,tags:[],version:"current",frontMatter:{id:"globals"},sidebar:"manualSidebar",previous:{title:"string type",permalink:"/docs/api/starlark/string"},next:{title:"actions type",permalink:"/docs/api/build/actions"}},d={},m=[{value:"CommandExecutorConfig",id:"commandexecutorconfig",level:2},{value:"<code>.type</code> attribute",id:"type-attribute",level:4},{value:"Details",id:"details",level:4},{value:"ConfigurationInfo",id:"configurationinfo",level:2},{value:"<code>.type</code> attribute",id:"type-attribute-1",level:4},{value:"Details",id:"details-1",level:4},{value:"ConstraintSettingInfo",id:"constraintsettinginfo",level:2},{value:"<code>.type</code> attribute",id:"type-attribute-2",level:4},{value:"Details",id:"details-2",level:4},{value:"ConstraintValueInfo",id:"constraintvalueinfo",level:2},{value:"<code>.type</code> attribute",id:"type-attribute-3",level:4},{value:"Details",id:"details-3",level:4},{value:"DefaultInfo",id:"defaultinfo",level:2},{value:"<code>.type</code> attribute",id:"type-attribute-4",level:4},{value:"Details",id:"details-4",level:4},{value:"ExecutionPlatformInfo",id:"executionplatforminfo",level:2},{value:"ExecutionPlatformRegistrationInfo",id:"executionplatformregistrationinfo",level:2},{value:"ExternalRunnerTestInfo",id:"externalrunnertestinfo",level:2},{value:"<code>.type</code> attribute",id:"type-attribute-5",level:4},{value:"Details",id:"details-5",level:4},{value:"InstallInfo",id:"installinfo",level:2},{value:"Label",id:"label",level:2},{value:"LocalResourceInfo",id:"localresourceinfo",level:2},{value:"<code>.type</code> attribute",id:"type-attribute-6",level:4},{value:"Details",id:"details-6",level:4},{value:"PlatformInfo",id:"platforminfo",level:2},{value:"<code>.type</code> attribute",id:"type-attribute-7",level:4},{value:"Details",id:"details-7",level:4},{value:"RunInfo",id:"runinfo",level:2},{value:"<code>.type</code> attribute",id:"type-attribute-8",level:4},{value:"Details",id:"details-8",level:4},{value:"TemplatePlaceholderInfo",id:"templateplaceholderinfo",level:2},{value:"<code>.type</code> attribute",id:"type-attribute-9",level:4},{value:"Details",id:"details-9",level:4},{value:"WorkerInfo",id:"workerinfo",level:2},{value:"<code>.type</code> attribute",id:"type-attribute-10",level:4},{value:"Details",id:"details-10",level:4},{value:"WorkerRunInfo",id:"workerruninfo",level:2},{value:"<code>.type</code> attribute",id:"type-attribute-11",level:4},{value:"Details",id:"details-11",level:4},{value:"__internal__",id:"__internal__",level:2},{value:"attrs",id:"attrs",level:2},{value:"cmd_args",id:"cmd_args",level:2},{value:"<code>.type</code> attribute",id:"type-attribute-12",level:4},{value:"Details",id:"details-12",level:4},{value:"dedupe",id:"dedupe",level:2},{value:"get_base_path",id:"get_base_path",level:2},{value:"get_cell_name",id:"get_cell_name",level:2},{value:"glob",id:"glob",level:2},{value:"host_info",id:"host_info",level:2},{value:"implicit_package_symbol",id:"implicit_package_symbol",level:2},{value:"load_symbols",id:"load_symbols",level:2},{value:"oncall",id:"oncall",level:2},{value:"package",id:"package",level:2},{value:"package_name",id:"package_name",level:2},{value:"provider",id:"provider",level:2},{value:"read_config",id:"read_config",level:2},{value:"read_package_value",id:"read_package_value",level:2},{value:"read_root_config",id:"read_root_config",level:2},{value:"regex_match",id:"regex_match",level:2},{value:"repository_name",id:"repository_name",level:2},{value:"rule",id:"rule",level:2},{value:"rule_exists",id:"rule_exists",level:2},{value:"select",id:"select",level:2},{value:"select_equal_internal",id:"select_equal_internal",level:2},{value:"select_map",id:"select_map",level:2},{value:"select_test",id:"select_test",level:2},{value:"sha256",id:"sha256",level:2},{value:"soft_error",id:"soft_error",level:2},{value:"transition",id:"transition",level:2},{value:"transitive_set",id:"transitive_set",level:2},{value:"warning",id:"warning",level:2},{value:"write_package_value",id:"write_package_value",level:2}],s={toc:m};function p(e){let{components:n,...a}=e;return(0,l.mdx)("wrapper",(0,t.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"globals"},"globals"),(0,l.mdx)("h2",{id:"commandexecutorconfig"},"CommandExecutorConfig"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def CommandExecutorConfig(\n    *,\n    local_enabled: bool.type,\n    remote_enabled: bool.type,\n    remote_cache_enabled: [None, bool.type] = None,\n    remote_execution_properties = None,\n    remote_execution_action_key = None,\n    remote_execution_max_input_files_mebibytes: [None, int.type] = None,\n    remote_execution_queue_time_threshold_s: [None, int.type] = None,\n    remote_execution_use_case = None,\n    use_limited_hybrid: bool.type = False,\n    allow_limited_hybrid_fallbacks: bool.type = False,\n    allow_hybrid_fallbacks_on_failure: bool.type = False,\n    use_windows_path_separators: bool.type = False,\n    use_persistent_workers: bool.type = False,\n    allow_cache_uploads: bool.type = False,\n    max_cache_upload_mebibytes: [None, int.type] = None,\n    experimental_low_pass_filter: bool.type = False,\n    remote_output_paths: [None, str.type] = None\n) -> "command_executor_config"\n')),(0,l.mdx)("p",null,"Contains configurations for how actions should be executed"),(0,l.mdx)("h4",{id:"type-attribute"},(0,l.mdx)("inlineCode",{parentName:"h4"},".type")," attribute"),(0,l.mdx)("p",null,"Produces ",(0,l.mdx)("inlineCode",{parentName:"p"},'"command_executor_config"')),(0,l.mdx)("h4",{id:"details"},"Details"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"local_enabled")," : Whether to use local execution for this execution platform.\nIf both remote_enabled and local_enabled are ",(0,l.mdx)("inlineCode",{parentName:"li"},"True"),", we will use the hybrid executor"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"remote_enabled"),": Whether to use remote execution for this execution platform"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"remote_cache_enabled"),": Whether to query RE caches"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"remote_execution_properties"),": Properties for remote execution for this platform"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"remote_execution_action_key"),": A component to inject into the action key\nThis should typically used to inject variability into the action key so that\nit's different across e.g. build modes (RE uses the action key for things like expected memory utilization)"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"remote_execution_max_input_files_mebibytes"),": The maximum input file size (in bytes) that remote execution can support"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"remote_execution_queue_time_threshold_s"),": The maximum time in seconds we are willing to wait\nin the RE queue for remote execution to start running our action"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"remote_execution_use_case"),": The use case to use when communicating with RE"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"use_limited_hybrid"),": Whether to use the limited hybrid executor"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"allow_limited_hybrid_fallbacks"),": Whether to allow fallbacks"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"allow_hybrid_fallbacks_on_failure"),": Whether to allow fallbacks when the result is failure (i.e. the command failed on the primary, but the infra worked)"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"use_windows_path_separators"),": Whether to use Windows path separators in command line arguments"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"use_persistent workers"),": Whether to use persistent workers for local execution if they are available"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"allow_cache_uploads"),": Whether to upload local actions to the RE cache"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"max_cache_upload_mebibytes"),": Maximum size to upload in cache uploads"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"experimental_low_pass_filter"),": Whether to use the experimental low pass filter"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"remote_output_paths"),": How to express output paths to RE")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"configurationinfo"},"ConfigurationInfo"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def ConfigurationInfo(\n    *,\n    constraints: {"target_label": "ConstraintValueInfo"},\n    values: {str.type: str.type}\n) -> "ConfigurationInfo"\n')),(0,l.mdx)("p",null,"Provider that signals that a rule contains configuration info. This is used both as part of defining configurations (",(0,l.mdx)("inlineCode",{parentName:"p"},"platform()"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"constraint_value()"),') and defining whether a target "matches" a configuration or not (',(0,l.mdx)("inlineCode",{parentName:"p"},"config_setting()"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"constraint_value()"),")"),(0,l.mdx)("h4",{id:"type-attribute-1"},(0,l.mdx)("inlineCode",{parentName:"h4"},".type")," attribute"),(0,l.mdx)("p",null,"Produces ",(0,l.mdx)("inlineCode",{parentName:"p"},'"ConfigurationInfo"')),(0,l.mdx)("h4",{id:"details-1"},"Details"),(0,l.mdx)("p",null,"Provides a number of fields that can be accessed:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'constraints: {"target_label": "ConstraintValueInfo"}')," - field")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},"values: {str.type: str.type}")," - field"))),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"constraintsettinginfo"},"ConstraintSettingInfo"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def ConstraintSettingInfo(*, label: "target_label") -> "ConstraintSettingInfo"\n')),(0,l.mdx)("p",null,"Provider that signals that a target can be used as a constraint key. This is the only provider returned by a ",(0,l.mdx)("inlineCode",{parentName:"p"},"constraint_setting()")," target."),(0,l.mdx)("h4",{id:"type-attribute-2"},(0,l.mdx)("inlineCode",{parentName:"h4"},".type")," attribute"),(0,l.mdx)("p",null,"Produces ",(0,l.mdx)("inlineCode",{parentName:"p"},'"ConstraintSettingInfo"')),(0,l.mdx)("h4",{id:"details-2"},"Details"),(0,l.mdx)("p",null,"Provides a number of fields that can be accessed:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},'label: "target_label"')," - field")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"constraintvalueinfo"},"ConstraintValueInfo"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def ConstraintValueInfo(\n    *,\n    setting: "ConstraintSettingInfo",\n    label: "target_label"\n) -> "ConstraintValueInfo"\n')),(0,l.mdx)("p",null,"Provider that signals that a target can be used as a constraint key. This is the only provider returned by a ",(0,l.mdx)("inlineCode",{parentName:"p"},"constraint_value()")," target."),(0,l.mdx)("h4",{id:"type-attribute-3"},(0,l.mdx)("inlineCode",{parentName:"h4"},".type")," attribute"),(0,l.mdx)("p",null,"Produces ",(0,l.mdx)("inlineCode",{parentName:"p"},'"ConstraintValueInfo"')),(0,l.mdx)("h4",{id:"details-3"},"Details"),(0,l.mdx)("p",null,"Provides a number of fields that can be accessed:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'setting: "ConstraintSettingInfo"')," - field")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'label: "target_label"')," - field"))),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"defaultinfo"},"DefaultInfo"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def DefaultInfo(\n    default_output = None,\n    default_outputs = None,\n    other_outputs = [],\n    sub_targets: {str.type: ""} = {}\n) -> "DefaultInfo"\n')),(0,l.mdx)("p",null,"A provider that all rules' implementations must return"),(0,l.mdx)("h4",{id:"type-attribute-4"},(0,l.mdx)("inlineCode",{parentName:"h4"},".type")," attribute"),(0,l.mdx)("p",null,"Produces ",(0,l.mdx)("inlineCode",{parentName:"p"},'"DefaultInfo"')),(0,l.mdx)("h4",{id:"details-4"},"Details"),(0,l.mdx)("p",null,"In many simple cases, this can be inferred for the user."),(0,l.mdx)("p",null,"Example of a rule's implementation function and how these fields are used by the framework:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-starlark"},'# //foo_binary.bzl\ndef impl(ctx):\n    ctx.action.run([ctx.attrs._cc[RunInfo], "-o", ctx.attrs.out.as_output()] + ctx.attrs.srcs)\n    ctx.action.run([\n        ctx.attrs._strip[RunInfo],\n        "--binary",\n        ctx.attrs.out,\n        "--stripped-out",\n        ctx.attrs.stripped.as_output(),\n        "--debug-symbols-out",\n        ctx.attrs.debug_info.as_output(),\n    ])\n    return [\n        DefaultInfo(\n            sub_targets = {\n                "stripped": [\n                    DefaultInfo(default_outputs = [ctx.attrs.stripped, ctx.attrs.debug_info]),\n                ],\n            },\n            default_output = ctx.attrs.out,\n    ]\n\nfoo_binary = rule(\n    impl=impl,\n    attrs={\n        "srcs": attrs.list(attrs.source()),\n        "out": attrs.output(),\n        "stripped": attrs.output(),\n        "debug_info": attrs.output(),\n        "_cc": attrs.dep(default="//tools:cc", providers=[RunInfo]),\n        "_strip_script": attrs.dep(default="//tools:strip", providers=[RunInfo])\n)\n\ndef foo_binary_wrapper(name, srcs):\n    foo_binary(\n        name = name,\n        srcs = src,\n        out = name,\n        stripped = name + ".stripped",\n        debug_info = name + ".debug_info",\n    )\n\n# //subdir/BUCK\nload("//:foo_binary.bzl", "foo_binary_wrapper")\n\ngenrule(name = "gen_stuff", ...., default_outs = ["foo.cpp"])\n\n# ":gen_stuff" pulls the default_outputs for //subdir:gen_stuff\nfoo_binary_wrapper(name = "foo", srcs = glob(["*.cpp"]) + [":gen_stuff"])\n\n# Builds just \'foo\' binary. The strip command is never invoked.\n$ buck build //subdir:foo\n\n# builds the \'foo\' binary, because it is needed by the \'strip\' command. Ensures that\n# both the stripped binary and the debug symbols are built.\n$ buck build //subdir:foo[stripped]\n')),(0,l.mdx)("p",null,"Provides a number of fields that can be accessed:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'sub_targets: {str.type: "provider_collection"}')," - A mapping of names to ",(0,l.mdx)("inlineCode",{parentName:"p"},"ProviderCollection"),"s. The keys are used when resolving the ",(0,l.mdx)("inlineCode",{parentName:"p"},"ProviderName")," portion of a ",(0,l.mdx)("inlineCode",{parentName:"p"},"ProvidersLabel"),". These collections can contain, and actually /must/ contain a ",(0,l.mdx)("inlineCode",{parentName:"p"},"DefaultInfo")," provider. However, nested label syntax is not supported. That is, ",(0,l.mdx)("inlineCode",{parentName:"p"},"cell//foo:bar[baz]")," is valid, ",(0,l.mdx)("inlineCode",{parentName:"p"},"cell//foo:bar[baz][quz]")," is not.")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'default_outputs: ["artifact"]')," - A list of ",(0,l.mdx)("inlineCode",{parentName:"p"},"Artifact"),'s that are built by default if this rule is requested explicitly, or depended on as as a "source".')),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'other_outputs: ["artifact"]')," - A list of ",(0,l.mdx)("inlineCode",{parentName:"p"},"ArtifactTraversable"),". The underlying ",(0,l.mdx)("inlineCode",{parentName:"p"},"Artifact"),"s they define will be built by default if this rule is requested, but ",(0,l.mdx)("em",{parentName:"p"},"not"),' when it\'s depended on as as a "source". ',(0,l.mdx)("inlineCode",{parentName:"p"},"ArtifactTraversable")," can be an ",(0,l.mdx)("inlineCode",{parentName:"p"},"Artifact")," (which yields itself), or ",(0,l.mdx)("inlineCode",{parentName:"p"},"cmd_args"),", which expand to all their inputs."))),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"executionplatforminfo"},"ExecutionPlatformInfo"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def ExecutionPlatformInfo(\n    *,\n    label,\n    configuration,\n    executor_config\n) -> "ExecutionPlatformInfo"\n')),(0,l.mdx)("p",null,"Provider that signals that a target represents an execution platform."),(0,l.mdx)("p",null,"Provides a number of fields that can be accessed:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'label: "target_label"')," - label of the defining rule, used in informative messages")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'configuration: "ConfigurationInfo"')," - The configuration of the execution platform")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'executor_config: "command_executor_config"')," - The executor config"))),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"executionplatformregistrationinfo"},"ExecutionPlatformRegistrationInfo"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def ExecutionPlatformRegistrationInfo(\n    *,\n    platforms,\n    fallback = _\n) -> "ExecutionPlatformRegistrationInfo"\n')),(0,l.mdx)("p",null,"Provider that gives the list of all execution platforms available for this build."),(0,l.mdx)("p",null,"Provides a number of fields that can be accessed:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'platforms: ["ExecutionPlatformInfo"]')," - field")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'fallback: ""')," - field"))),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"externalrunnertestinfo"},"ExternalRunnerTestInfo"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def ExternalRunnerTestInfo(\n    type,\n    command = None,\n    env = None,\n    labels = None,\n    contacts = None,\n    use_project_relative_paths = None,\n    run_from_project_root = None,\n    default_executor = None,\n    executor_overrides = None,\n    local_resources = None\n) -> "ExternalRunnerTestInfo"\n')),(0,l.mdx)("p",null,"Provider that signals that a rule can be tested using an external runner. This is the Buck1-compatible API for tests."),(0,l.mdx)("h4",{id:"type-attribute-5"},(0,l.mdx)("inlineCode",{parentName:"h4"},".type")," attribute"),(0,l.mdx)("p",null,"Produces ",(0,l.mdx)("inlineCode",{parentName:"p"},'"ExternalRunnerTestInfo"')),(0,l.mdx)("h4",{id:"details-5"},"Details"),(0,l.mdx)("p",null,"Provides a number of fields that can be accessed:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},"test_type: str.type")," - A Starlark value representing the type of this test. This is of type str.type")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'command: [""]')," - A Starlark value representing the command for this test. The external test runner is what gives meaning to this command. This is of type [",'[str.type, "_arglike"]',"]")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'env: {str.type: ""}')," - A Starlark value representing the environment for this test. Here again, the external test runner is what will this meaning. This is of type {str.type: _arglike}")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},"labels: [str.type]")," - A starlark value representing the labels for this test. This is of type ","[str.type]")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},"contacts: [str.type]")," - A starlark value representing the contacts for this test. This is largely expected to be an oncall, though it's not validated in any way. This is of type ","[str.type]")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},"use_project_relative_paths: [bool.type]")," - Whether this test should use relative paths. The default is not to. This is of type ","[bool.type]")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},"run_from_project_root: [bool.type]")," - Whether this test should run from the project root, as opposed to the cell root. The default is not to. This is of type ","[bool.type]")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'default_executor: "command_executor_config"')," - Default executor to use to run tests.  This is of type CommandExecutorConfig. If none is passed we will default to the execution platform.")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'executor_overrides: {str.type: "command_executor_config"}')," - Executors that Tpx can use to override the default executor. This is of type {str.type: CommandExecutorConfig}")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'local_resources: {str.type: ["LocalResourceInfo", None]}')," - Mapping from a local resource type to a corresponding provider. Required types are passed from test runner. If the value for a corresponding type is omitted it means local resource should be ignored when executing tests even if those are passed as required from test runner."))),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"installinfo"},"InstallInfo"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def InstallInfo(installer: "label", files: {str.type: ""}) -> "InstallInfo"\n')),(0,l.mdx)("p",null,"A provider that can be constructed and have its fields accessed. Returned by rules."),(0,l.mdx)("p",null,"Provides a number of fields that can be accessed:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'installer: "label"')," - field")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'files: {str.type: "artifact"}')," - field"))),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"label"},"Label"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'Label: "type"\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"localresourceinfo"},"LocalResourceInfo"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def LocalResourceInfo(\n    *,\n    source_target,\n    setup,\n    resource_env_vars\n) -> "LocalResourceInfo"\n')),(0,l.mdx)("p",null,"A provider that can be constructed and have its fields accessed. Returned by rules."),(0,l.mdx)("h4",{id:"type-attribute-6"},(0,l.mdx)("inlineCode",{parentName:"h4"},".type")," attribute"),(0,l.mdx)("p",null,"Produces ",(0,l.mdx)("inlineCode",{parentName:"p"},'"LocalResourceInfo"')),(0,l.mdx)("h4",{id:"details-6"},"Details"),(0,l.mdx)("p",null,"Provides a number of fields that can be accessed:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'source_target: "label"')," - Configured target that is providing this local resource.")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'setup: "cmd_args"'),' - Command to run to initialize a local resource. Running this command writes a JSON to stdout. This JSON represents a pool of local resources which are ready to be used. Example JSON would be: {\n"pid": 42, "resources": ','[ {"socket_address": "foo:1"}, {"socket_address": "bar:2"} ]','\n} Where \'"pid"',(0,l.mdx)("inlineCode",{parentName:"p"},"maps to a PID of a process which should be sent SIGTERM to release the pool of resources when they are no longer needed."),'"resources"',(0,l.mdx)("inlineCode",{parentName:"p"},"maps to the pool of resources. When a local resource from this particular pool is needed for an execution command, single entity will be reserved from the pool, for example"),'{"socket_address": "bar:2"}',(0,l.mdx)("inlineCode",{parentName:"p"},"and environment variable with name resolved using mapping in"),"resource_env_vars",(0,l.mdx)("inlineCode",{parentName:"p"},"field and"),'"socket_address"` key will be added to execution command.')),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},"resource_env_vars: {str.type: str.type}")," - Mapping from environment variable (appended to an execution command which is dependent on this local resource) to keys in setup command JSON output."))),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"platforminfo"},"PlatformInfo"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def PlatformInfo(\n    *,\n    label: str.type,\n    configuration: "ConfigurationInfo"\n) -> "PlatformInfo"\n')),(0,l.mdx)("p",null,"A provider that can be constructed and have its fields accessed. Returned by rules."),(0,l.mdx)("h4",{id:"type-attribute-7"},(0,l.mdx)("inlineCode",{parentName:"h4"},".type")," attribute"),(0,l.mdx)("p",null,"Produces ",(0,l.mdx)("inlineCode",{parentName:"p"},'"PlatformInfo"')),(0,l.mdx)("h4",{id:"details-7"},"Details"),(0,l.mdx)("p",null,"Provides a number of fields that can be accessed:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},"label: str.type")," - field")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'configuration: "ConfigurationInfo"')," - field"))),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"runinfo"},"RunInfo"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def RunInfo(args = []) -> "RunInfo"\n')),(0,l.mdx)("p",null,"Provider that signals that a rule is runnable"),(0,l.mdx)("h4",{id:"type-attribute-8"},(0,l.mdx)("inlineCode",{parentName:"h4"},".type")," attribute"),(0,l.mdx)("p",null,"Produces ",(0,l.mdx)("inlineCode",{parentName:"p"},'"RunInfo"')),(0,l.mdx)("h4",{id:"details-8"},"Details"),(0,l.mdx)("p",null,"Provides a number of fields that can be accessed:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},'args: "cmd_args"')," - The command to run, stored as CommandLine")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"templateplaceholderinfo"},"TemplatePlaceholderInfo"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def TemplatePlaceholderInfo(\n    unkeyed_variables = {},\n    keyed_variables = {}\n) -> "TemplatePlaceholderInfo"\n')),(0,l.mdx)("p",null,"A provider that is used for expansions in string attribute templates"),(0,l.mdx)("h4",{id:"type-attribute-9"},(0,l.mdx)("inlineCode",{parentName:"h4"},".type")," attribute"),(0,l.mdx)("p",null,"Produces ",(0,l.mdx)("inlineCode",{parentName:"p"},'"TemplatePlaceholderInfo"')),(0,l.mdx)("h4",{id:"details-9"},"Details"),(0,l.mdx)("p",null,'String attribute templates allow two types of user-defined placeholders, "unkeyed placeholders"\nlike ',(0,l.mdx)("inlineCode",{parentName:"p"},"$(CXX)")," or ",(0,l.mdx)("inlineCode",{parentName:"p"},"$(aapt)"),' and "keyed placeholders"  that include a target key like\n',(0,l.mdx)("inlineCode",{parentName:"p"},"$(cxxppflags //some:target)"),". The expansion of each of these types is based on the\n",(0,l.mdx)("inlineCode",{parentName:"p"},"TemplatePlaceholderInfo")," providers."),(0,l.mdx)("p",null,'"keyed placeholders" are used for the form ',(0,l.mdx)("inlineCode",{parentName:"p"},"$(<key> <target>)")," or ",(0,l.mdx)("inlineCode",{parentName:"p"},"$(<key> <target> <arg>)"),". In both cases\nthe lookup will expect a ",(0,l.mdx)("inlineCode",{parentName:"p"},"TemplatePlaceholderInfo")," in the providers of ",(0,l.mdx)("inlineCode",{parentName:"p"},"<target>"),". It will then lookup\n",(0,l.mdx)("inlineCode",{parentName:"p"},"<key>")," in the keyed_variables (call this the ",(0,l.mdx)("inlineCode",{parentName:"p"},"value"),"). There are then four valid possibilities:"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"no-arg placeholder, an arg-like ",(0,l.mdx)("inlineCode",{parentName:"li"},"value"),": resolve to ",(0,l.mdx)("inlineCode",{parentName:"li"},"value")),(0,l.mdx)("li",{parentName:"ol"},"no-arg placeholder, a dictionary ",(0,l.mdx)("inlineCode",{parentName:"li"},"value"),": resolve to ",(0,l.mdx)("inlineCode",{parentName:"li"},'value["DEFAULT"]')),(0,l.mdx)("li",{parentName:"ol"},"arg placeholder, a non-dictionary ",(0,l.mdx)("inlineCode",{parentName:"li"},"value"),": this is an error"),(0,l.mdx)("li",{parentName:"ol"},"arg placeholder, a dictionary ",(0,l.mdx)("inlineCode",{parentName:"li"},"value"),": resolve to ",(0,l.mdx)("inlineCode",{parentName:"li"},"value[<arg>]"))),(0,l.mdx)("p",null,'"unkeyed placeholders" are resolved by matching to any of the deps of the target. ',(0,l.mdx)("inlineCode",{parentName:"p"},"$(CXX)"),' will resolve\nto the "CXX" value in any dep\'s ',(0,l.mdx)("inlineCode",{parentName:"p"},"TemplateProviderInfo.unkeyed_variables")),(0,l.mdx)("p",null,"Fields:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},'unkeyed_variables: A mapping of names to arg-like values. These are used for "unkeyed placeholder" expansion.'),(0,l.mdx)("li",{parentName:"ul"},'keyed_variables: A mapping of names to arg-like values or dictionary of string to\narg-like values. These are used for "keyed placeholder" expansion.')),(0,l.mdx)("p",null,"Provides a number of fields that can be accessed:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'unkeyed_variables: ""')," - field")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'keyed_variables: ""')," - field"))),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"workerinfo"},"WorkerInfo"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def WorkerInfo(\n    exe = [],\n    *,\n    concurrency: [None, int.type] = None\n) -> "WorkerInfo"\n')),(0,l.mdx)("p",null,"Provider that signals that a rule is a worker tool"),(0,l.mdx)("h4",{id:"type-attribute-10"},(0,l.mdx)("inlineCode",{parentName:"h4"},".type")," attribute"),(0,l.mdx)("p",null,"Produces ",(0,l.mdx)("inlineCode",{parentName:"p"},'"WorkerInfo"')),(0,l.mdx)("h4",{id:"details-10"},"Details"),(0,l.mdx)("p",null,"Provides a number of fields that can be accessed:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'exe: "cmd_args"')," - field")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},"concurrency: [None, int.type]")," - field"))),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"workerruninfo"},"WorkerRunInfo"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def WorkerRunInfo(*, worker: "WorkerInfo", exe = []) -> "WorkerRunInfo"\n')),(0,l.mdx)("p",null,"Provider that signals that a rule can run using a worker"),(0,l.mdx)("h4",{id:"type-attribute-11"},(0,l.mdx)("inlineCode",{parentName:"h4"},".type")," attribute"),(0,l.mdx)("p",null,"Produces ",(0,l.mdx)("inlineCode",{parentName:"p"},'"WorkerRunInfo"')),(0,l.mdx)("h4",{id:"details-11"},"Details"),(0,l.mdx)("p",null,"Provides a number of fields that can be accessed:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'worker: "WorkerInfo"')," - field")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("p",{parentName:"li"},(0,l.mdx)("inlineCode",{parentName:"p"},'exe: "cmd_args"')," - field"))),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"__internal__"},"_","_","internal","_","_"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"__internal__: struct(..)\n")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"attrs"},"attrs"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'attrs: "attrs"\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"cmd_args"},"cmd","_","args"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def cmd_args(\n    *args,\n    delimiter: str.type = _,\n    format: str.type = _,\n    prepend: str.type = _,\n    quote: str.type = _\n) -> "cmd_args"\n')),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"cmd_args")," type is created by this function and is consumed by ",(0,l.mdx)("inlineCode",{parentName:"p"},"ctx.actions.run"),". The type is a mutable collection of strings and artifact values. In general, command lines, artifacts, strings, ",(0,l.mdx)("inlineCode",{parentName:"p"},"RunInfo")," and lists thereof can be added to or used to construct a ",(0,l.mdx)("inlineCode",{parentName:"p"},"cmd_args")," value."),(0,l.mdx)("h4",{id:"type-attribute-12"},(0,l.mdx)("inlineCode",{parentName:"h4"},".type")," attribute"),(0,l.mdx)("p",null,"Produces ",(0,l.mdx)("inlineCode",{parentName:"p"},'"cmd_args"')),(0,l.mdx)("h4",{id:"details-12"},"Details"),(0,l.mdx)("p",null,"The arguments are:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"*args")," - a list of things to add to the command line, each of which must be coercible to a command line. Further items can be added with ",(0,l.mdx)("inlineCode",{parentName:"li"},"cmd.add"),"."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"format")," - a string that provides a format to apply to the argument. for example, ",(0,l.mdx)("inlineCode",{parentName:"li"},'cmd_args(x, format="--args={}")')," would prepend ",(0,l.mdx)("inlineCode",{parentName:"li"},"--args=")," before ",(0,l.mdx)("inlineCode",{parentName:"li"},"x"),", or if ",(0,l.mdx)("inlineCode",{parentName:"li"},"x")," was a list, before each element in ",(0,l.mdx)("inlineCode",{parentName:"li"},"x"),"."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"delimiter")," - added between arguments to join them together. For example, ",(0,l.mdx)("inlineCode",{parentName:"li"},'cmd_args(["--args=",x], delimiter="")')," would produce a single argument to the underlying tool."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"prepend")," - added as a separate argument before each argument."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"quote")," - indicates whether quoting is to be applied to each argument. The only current valid value is ",(0,l.mdx)("inlineCode",{parentName:"li"},'"shell"'),".")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"dedupe"},"dedupe"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def dedupe(val, /)\n")),(0,l.mdx)("p",null,"Remove duplicates in a list. Uses identity of value (pointer), rather than by equality. In many cases you should use a transitive set instead."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"get_base_path"},"get","_","base","_","path"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def get_base_path() -> str.type\n")),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"get_base_path()")," can only be called in ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," files, and returns the name of the package. E.g. inside ",(0,l.mdx)("inlineCode",{parentName:"p"},"foo//bar/baz/BUCK")," the output will be ",(0,l.mdx)("inlineCode",{parentName:"p"},"bar/baz"),"."),(0,l.mdx)("p",null,"This function is identical to ",(0,l.mdx)("inlineCode",{parentName:"p"},"package_name"),"."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"get_cell_name"},"get","_","cell","_","name"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def get_cell_name() -> str.type\n")),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"get_cell_name()")," can be called from either a ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," file or a ",(0,l.mdx)("inlineCode",{parentName:"p"},".bzl")," file, and returns the name of the cell where the ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," file that started the call lives."),(0,l.mdx)("p",null,"For example, inside ",(0,l.mdx)("inlineCode",{parentName:"p"},"foo//bar/baz/BUCK")," the output will be ",(0,l.mdx)("inlineCode",{parentName:"p"},"foo"),".\nIf that ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," file does a ",(0,l.mdx)("inlineCode",{parentName:"p"},'load("hello//world.bzl", "something")')," then\nthe result in that ",(0,l.mdx)("inlineCode",{parentName:"p"},".bzl")," file will also be ",(0,l.mdx)("inlineCode",{parentName:"p"},"foo"),"."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"glob"},"glob"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def glob(include: [str.type], *, exclude: [str.type] = []) -> [str.type]\n")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"glob()")," function specifies a set of files using patterns. Only available from ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," files."),(0,l.mdx)("p",null,"A typical ",(0,l.mdx)("inlineCode",{parentName:"p"},"glob")," call looks like:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'glob(["foo/**/*.h"])\n')),(0,l.mdx)("p",null,"This call will match all header files in the ",(0,l.mdx)("inlineCode",{parentName:"p"},"foo")," directory, recursively."),(0,l.mdx)("p",null,"You can also pass a named ",(0,l.mdx)("inlineCode",{parentName:"p"},"exclude")," parameter to remove files matching a pattern:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'glob(["foo/**/*.h"], exclude = ["**/config.h"])\n')),(0,l.mdx)("p",null,"This call will remove all ",(0,l.mdx)("inlineCode",{parentName:"p"},"config.h")," files from the initial match."),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"glob()")," call is evaluated against the list of files owned by this ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," file.\nA file is owned by whichever ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," file is closest above it - so given ",(0,l.mdx)("inlineCode",{parentName:"p"},"foo/BUCK")," and\n",(0,l.mdx)("inlineCode",{parentName:"p"},"foo/bar/BUCK")," the file ",(0,l.mdx)("inlineCode",{parentName:"p"},"foo/file.txt")," would be owned by ",(0,l.mdx)("inlineCode",{parentName:"p"},"foo/BUCK")," (and available from\nits ",(0,l.mdx)("inlineCode",{parentName:"p"},"glob")," results) but the file ",(0,l.mdx)("inlineCode",{parentName:"p"},"foo/bar/file.txt")," would be owned by ",(0,l.mdx)("inlineCode",{parentName:"p"},"foo/bar/BUCk"),"\nand ",(0,l.mdx)("em",{parentName:"p"},"not")," appear in the glob result of ",(0,l.mdx)("inlineCode",{parentName:"p"},"foo/BUCK"),", even if you write ",(0,l.mdx)("inlineCode",{parentName:"p"},'glob(["bar/file.txt"])'),".\nAs a consequence of this rule, ",(0,l.mdx)("inlineCode",{parentName:"p"},'glob(["../foo.txt"])')," will always return an empty list of files."),(0,l.mdx)("p",null,"Currently ",(0,l.mdx)("inlineCode",{parentName:"p"},"glob")," is evaluated case-insensitively on all file systems, but we expect\nthat to change to case sensitive in the near future."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"host_info"},"host","_","info"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def host_info() -> struct(..)\n")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"host_info()")," function is used to get the current OS and processor architecture on the host. The structure returned is laid out thusly:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"struct(\n    os=struct(\n        is_linux=True|False,\n        is_macos=True|False,\n        is_windows=True|False,\n        is_freebsd=True|False,\n        is_unknown=True|False,\n    ),\n    arch=struct(\n        is_aarch64=True|False,\n        is_arm=True|False,\n        is_armeb=True|False,\n        is_i386=True|False,\n        is_mips=True|False,\n        is_mips64=True|False,\n        is_mipsel=True|False,\n        is_mipsel64=True|False,\n        is_powerpc=True|False,\n        is_ppc64=True|False,\n        is_x86_64=True|False,\n        is_unknown=True|False,\n    ),\n)\n")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"implicit_package_symbol"},"implicit","_","package","_","symbol"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def implicit_package_symbol(name: str.type, default = _)\n")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"load_symbols"},"load","_","symbols"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def load_symbols(symbols: {str.type: ""}) -> None\n')),(0,l.mdx)("p",null,"Used in a ",(0,l.mdx)("inlineCode",{parentName:"p"},".bzl")," file to set exported symbols. In most cases just defining the symbol as a top-level binding is sufficient, but sometimes the names might be programatically generated."),(0,l.mdx)("p",null,"It is undefined behaviour if you try and use any of the symbols exported\nhere later in the same module, or if they overlap with existing definitions.\nThis function should be used rarely."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"oncall"},"oncall"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def oncall(name: str.type, /) -> None\n")),(0,l.mdx)("p",null,"Called in a ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," file to declare the oncall contact details for all the targets defined. Must be called at most once, before any targets have been declared. Errors if called from a ",(0,l.mdx)("inlineCode",{parentName:"p"},".bzl")," file."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"package"},"package"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def package(\n    *,\n    inherit: bool.type = False,\n    visibility: [str.type] = [],\n    within_view: [str.type] = []\n) -> None\n")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"package_name"},"package","_","name"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def package_name() -> str.type\n")),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"package_name()")," can only be called in ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," files, and returns the name of the package. E.g. inside ",(0,l.mdx)("inlineCode",{parentName:"p"},"foo//bar/baz/BUCK")," the output will be ",(0,l.mdx)("inlineCode",{parentName:"p"},"bar/baz"),"."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"provider"},"provider"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def provider(\n    *,\n    doc: str.type = "",\n    fields: [[str.type], {str.type: str.type}]\n) -> "provider_callable"\n')),(0,l.mdx)("p",null,"Create a ",(0,l.mdx)("inlineCode",{parentName:"p"},'"provider"')," type that can be returned from ",(0,l.mdx)("inlineCode",{parentName:"p"},"rule")," implementations. Used to pass information from a rule to the things that depend on it. Typically named with an ",(0,l.mdx)("inlineCode",{parentName:"p"},"Info")," suffix."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'GroovyLibraryInfo(fields = [\n    "objects",  # a list of artifacts\n    "options",  # a string containing compiler options\n])\n')),(0,l.mdx)("p",null,"Given a dependency you can obtain the provider with ",(0,l.mdx)("inlineCode",{parentName:"p"},"my_dep[GroovyLibraryInfo]"),"\nwhich returns either ",(0,l.mdx)("inlineCode",{parentName:"p"},"None")," or a value of type ",(0,l.mdx)("inlineCode",{parentName:"p"},"GroovyLibraryInfo"),"."),(0,l.mdx)("p",null,"For providers that accumulate upwards a transitive set is often a good choice."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"read_config"},"read","_","config"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def read_config(section: str.type, key: str.type, default = _)\n")),(0,l.mdx)("p",null,"Read a configuration from the nearest enclosing ",(0,l.mdx)("inlineCode",{parentName:"p"},".buckconfig")," of the ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," file that started evaluation of this code."),(0,l.mdx)("p",null,"As an example, if you have a ",(0,l.mdx)("inlineCode",{parentName:"p"},".buckconfig")," of:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-toml"},"[package_options]\ncompile = super_fast\n")),(0,l.mdx)("p",null,"Then you would get the following results:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'read_config("package_options", "compile") == "super_fast"\nread_config("package_options", "linker") == None\nread_config("package_options", "linker", "a_default") == "a_default"\n')),(0,l.mdx)("p",null,"In general the use of ",(0,l.mdx)("inlineCode",{parentName:"p"},".buckconfig")," is discouraged in favour of ",(0,l.mdx)("inlineCode",{parentName:"p"},"select"),",\nbut it can still be useful."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"read_package_value"},"read","_","package","_","value"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def read_package_value(key: str.type, /)\n")),(0,l.mdx)("p",null,"Read value specified in the ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," file."),(0,l.mdx)("p",null,"Returns ",(0,l.mdx)("inlineCode",{parentName:"p"},"None")," if value is not set."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"read_root_config"},"read","_","root","_","config"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def read_root_config(\n    section: str.type,\n    key: str.type,\n    default: [None, str.type] = None,\n    /\n) -> [None, str.type]\n")),(0,l.mdx)("p",null,"Like ",(0,l.mdx)("inlineCode",{parentName:"p"},"read_config")," but the project root ",(0,l.mdx)("inlineCode",{parentName:"p"},".buckconfig")," is always consulted, regardless of the cell of the originating ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," file."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"regex_match"},"regex","_","match"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def regex_match(regex: str.type, str: str.type, /) -> bool.type\n")),(0,l.mdx)("p",null,"Test if a regular expression matches a string. Fails if the regular expression is malformed."),(0,l.mdx)("p",null,"As an example:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'regex_match("^[a-z]*$", "hello") == True\nregex_match("^[a-z]*$", "1234") == False\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"repository_name"},"repository","_","name"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def repository_name() -> str.type\n")),(0,l.mdx)("p",null,"Like ",(0,l.mdx)("inlineCode",{parentName:"p"},"get_cell_name()")," but prepends a leading ",(0,l.mdx)("inlineCode",{parentName:"p"},"@")," for compatibility with Buck1. You should call ",(0,l.mdx)("inlineCode",{parentName:"p"},"get_cell_name()")," instead, and if you really want the ",(0,l.mdx)("inlineCode",{parentName:"p"},"@"),", prepend it yourself."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"rule"},"rule"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def rule(\n    *,\n    impl,\n    attrs: {str.type: "attribute"},\n    cfg = _,\n    doc: str.type = "",\n    is_configuration_rule: bool.type = False,\n    is_toolchain_rule: bool.type = False\n) -> "rule"\n')),(0,l.mdx)("p",null,"Define a rule. As a simple example:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def _my_rule(ctx: "context") -> ["provider"]:\n    output = ctx.actions.write("hello.txt", ctx.attrs.contents, executable = ctx.attrs.exe)\n    return [DefaultInfo(outputs = [output])]\n\nMyRule = rule(impl = _my_rule, attrs = {\n    "contents": attrs.string(),\n    "exe": attrs.option(attrs.bool(), default = False),\n})\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"rule_exists"},"rule","_","exists"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def rule_exists(name: str.type) -> bool.type\n")),(0,l.mdx)("p",null,"Check if the target with ",(0,l.mdx)("inlineCode",{parentName:"p"},"name")," has already been defined, returns ",(0,l.mdx)("inlineCode",{parentName:"p"},"True")," if it has."),(0,l.mdx)("p",null,"Note that this function checks for the existence of a ",(0,l.mdx)("em",{parentName:"p"},"target")," rather than a ",(0,l.mdx)("em",{parentName:"p"},"rule"),".\nIn general use of this function is discouraged, as it makes definitions of rules not compose."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"select"},"select"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def select(d, /) -> "selector"\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"select_equal_internal"},"select","_","equal","_","internal"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def select_equal_internal(left, right, /) -> bool.type\n")),(0,l.mdx)("p",null,"Tests that two selects are equal to each other. For testing use only."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"select_map"},"select","_","map"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def select_map(d, func, /)\n")),(0,l.mdx)("p",null,"Applies a mapping function to a selector. See ","[StarlarkSelector::select_map]","."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"select_test"},"select","_","test"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def select_test(d, func, /) -> bool.type\n")),(0,l.mdx)("p",null,"Applies a test function to a selector. See ","[StarlarkSelector::select_test]","."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"sha256"},"sha256"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def sha256(val: str.type, /) -> str.type\n")),(0,l.mdx)("p",null,"Computes a sha256 digest for a string. Returns the hex representation of the digest."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'sha256("Buck2 is the best build system") == "bb99a3f19ecba6c4d2c7cd321b63b669684c713881baae21a6b1d759b3ec6ac9"\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"soft_error"},"soft","_","error"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def soft_error(category: str.type, message: str.type, /) -> None\n")),(0,l.mdx)("p",null,"Produce an error that will become a hard error at some point in the future, but for now is a warning which is logged to the server. In the open source version of Buck2 this function always results in an error."),(0,l.mdx)("p",null,"Called passing a stable key (must be ",(0,l.mdx)("inlineCode",{parentName:"p"},"snake_case")," and start with ",(0,l.mdx)("inlineCode",{parentName:"p"},"starlark_"),",\nused for consistent reporting) and an arbitrary message (used for debugging)."),(0,l.mdx)("p",null,"As an example:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'soft_error(\n    "starlark_rule_is_too_long",\n    "Length of property exceeds 100 characters in " + repr(ctx.label),\n)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"transition"},"transition"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def transition(\n    *,\n    impl,\n    refs: {str.type: str.type},\n    attrs: [str.type] = _,\n    split: bool.type = False\n) -> "transition"\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"transitive_set"},"transitive","_","set"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def transitive_set(\n    args_projections: {str.type: ""} = _,\n    json_projections: {str.type: ""} = _,\n    reductions: {str.type: ""} = _\n) -> "transitive_set_definition"\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"warning"},"warning"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def warning(x: str.type, /) -> None\n")),(0,l.mdx)("p",null,"Print a warning. The line will be decorated with the timestamp and other details, including the word ",(0,l.mdx)("inlineCode",{parentName:"p"},"WARN")," (colored, if the console supports it)."),(0,l.mdx)("p",null,"If you are not writing a warning, use ",(0,l.mdx)("inlineCode",{parentName:"p"},"print")," instead. Be aware that printing\nlots of output (warnings or not) can be cause all information to be ignored by the user."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"write_package_value"},"write","_","package","_","value"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def write_package_value(\n    key: str.type,\n    value,\n    /,\n    *,\n    overwrite: bool.type = False\n) -> None\n")),(0,l.mdx)("p",null,"Set the value to be accessible in the nested ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," files."))}p.isMDXComponent=!0}}]);