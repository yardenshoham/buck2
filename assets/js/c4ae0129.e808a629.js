"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[514],{3905:(e,n,a)=>{a.r(n),a.d(n,{MDXContext:()=>p,MDXProvider:()=>s,mdx:()=>v,useMDXComponents:()=>m,withMDXComponents:()=>c});var t=a(67294);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e},i.apply(this,arguments)}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function d(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=t.createContext({}),c=function(e){return function(n){var a=m(n.components);return t.createElement(e,i({},n,{components:a}))}},m=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},s=function(e){var n=m(e.components);return t.createElement(p.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},x=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,i=e.originalType,r=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),c=m(a),s=l,u=c["".concat(r,".").concat(s)]||c[s]||f[s]||i;return a?t.createElement(u,o(o({ref:n},p),{},{components:a})):t.createElement(u,o({ref:n},p))}));function v(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=x;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[u]="string"==typeof e?e:l,r[1]=o;for(var p=2;p<i;p++)r[p]=a[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}x.displayName="MDXCreateElement"},20427:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var t=a(87462),l=(a(67294),a(3905));const i={},r="Package-local values",o={unversionedId:"rfcs/package-local-values",id:"rfcs/package-local-values",title:"Package-local values",description:"This RFC proposes to extend buck2 Starlark with package-local values.",source:"@site/../docs/rfcs/package-local-values.md",sourceDirName:"rfcs",slug:"/rfcs/package-local-values",permalink:"/docs/rfcs/package-local-values",draft:!1,tags:[],version:"current",frontMatter:{}},d={},p=[{value:"Why",id:"why",level:2},{value:"What we have now",id:"what-we-have-now",level:2},{value:"API",id:"api",level:2},{value:"<code>PACKAGE</code> files",id:"package-files",level:3},{value:"API",id:"api-1",level:3},{value:"<code>PACKAGE</code> file API",id:"package-file-api",level:4},{value:"<code>BUCK</code> file API",id:"buck-file-api",level:4},{value:"<code>read_config</code>",id:"read_config",level:3}],c={toc:p};function m(e){let{components:n,...a}=e;return(0,l.mdx)("wrapper",(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"package-local-values"},"Package-local values"),(0,l.mdx)("p",null,"This RFC proposes to extend buck2 Starlark with package-local values."),(0,l.mdx)("h2",{id:"why"},"Why"),(0,l.mdx)("p",null,"DevX people want to have some per-directory configuration files,\naccessible from Starlark macros."),(0,l.mdx)("p",null,"For example, a project NNN may want to switch to building using LLVM 15 by default.\nEnd users would want to have an easy instruction how to do that,\nafter DevX people provided instructions and infrastructure for that."),(0,l.mdx)("h2",{id:"what-we-have-now"},"What we have now"),(0,l.mdx)("p",null,"Currently, in fbcode, we have ",(0,l.mdx)("inlineCode",{parentName:"p"},"get_modes")," mechanism."),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"get_modes")," symbol is registered in per-package implicit symbols,\n",(0,l.mdx)("a",{parentName:"p",href:"https://fburl.com/code/7ud7e3ci"},"here"),"."),(0,l.mdx)("p",null,"This symbol can be accessed from macros using\n",(0,l.mdx)("a",{parentName:"p",href:"https://fburl.com/code/u5coj9s7"},"implicit_package_symbol")," function."),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"get_modes")," functions are package-local, but all ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUILD_MODE.bzl"),"\nfiles need to be registered in global buckconfig, which is not ideal."),(0,l.mdx)("p",null,"Proposed per-package properties can replace ",(0,l.mdx)("inlineCode",{parentName:"p"},"get_modes")," mechanism."),(0,l.mdx)("h2",{id:"api"},"API"),(0,l.mdx)("h3",{id:"package-files"},(0,l.mdx)("inlineCode",{parentName:"h3"},"PACKAGE")," files"),(0,l.mdx)("p",null,"Before evaluating ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," file, buck2 will evaluate all ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," files\nin the same directory and all parent directories.\nAbsent ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," files are treated as empty files."),(0,l.mdx)("p",null,"All relevant ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," files are executed sequentially\nfrom the root directory to the current directory\n(but unrelated ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," files can be executed in parallel).\nEvaluating ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," files sequentially provides additional guarantees,\nfor example, attempt to override a property (unless explicitly requested)\nshould fail with Starlark call stack."),(0,l.mdx)("p",null,"Each ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," file is evaluated at most once (like ",(0,l.mdx)("inlineCode",{parentName:"p"},"bzl")," file)."),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," files may load arbitrary ",(0,l.mdx)("inlineCode",{parentName:"p"},"bzl")," files.\n",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK"),"-specific functions called in ",(0,l.mdx)("inlineCode",{parentName:"p"},"bzl")," files (like rule functions)\nare available, but calling functions from ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," files is an error.\nThis way, ",(0,l.mdx)("inlineCode",{parentName:"p"},"bzl")," files are evaluated only once regardless of whether\nthey are loaded from ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," or ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," file."),(0,l.mdx)("h3",{id:"api-1"},"API"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," files have a global function:"),(0,l.mdx)("h4",{id:"package-file-api"},(0,l.mdx)("inlineCode",{parentName:"h4"},"PACKAGE")," file API"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def write_package_value(\n    name: str.type,\n    value: "",\n    overwrite: bool.type = False,\n): ...\n')),(0,l.mdx)("p",null,"Name is a string which must contain exactly one dot symbol (just to enforce code style)."),(0,l.mdx)("p",null,"Value is an arbitrary Starlark value, for example, an integer, a list of integer,\na struct or a function."),(0,l.mdx)("p",null,"When ",(0,l.mdx)("inlineCode",{parentName:"p"},"overwrite")," is ",(0,l.mdx)("inlineCode",{parentName:"p"},"False")," (default), attempt to overwrite per-package\nvalue defined in parent ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," file will fail."),(0,l.mdx)("p",null,"Written values are frozen when ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," file evaluation is finished."),(0,l.mdx)("p",null,"Note ",(0,l.mdx)("inlineCode",{parentName:"p"},"write_package_value")," symbol exists in ",(0,l.mdx)("inlineCode",{parentName:"p"},"bzl")," globals,\nand it can be called from ",(0,l.mdx)("inlineCode",{parentName:"p"},"bzl")," file in context of ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," evaluation,\nbut calling ",(0,l.mdx)("inlineCode",{parentName:"p"},"write_package_file")," is an error on context of ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," evaluation."),(0,l.mdx)("p",null,"Modifying ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," file logically invalidates the ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," file of this package,\nand all ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," files of subpackages.\nHowever, ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," file evaluation may track which package-local values were\naccessed and only invalidate ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," files which were potentially affected\n(similarly to how we do it with buckconfigs, with individual properties\nbeing projection keys)."),(0,l.mdx)("h4",{id:"buck-file-api"},(0,l.mdx)("inlineCode",{parentName:"h4"},"BUCK")," file API"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," files (and ",(0,l.mdx)("inlineCode",{parentName:"p"},"bzl")," files included from ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," files) have a global function:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def read_package_value(\n    name: str.type,\n): ...\n")),(0,l.mdx)("p",null,"This function returns the nearest value registered per package,\nor ",(0,l.mdx)("inlineCode",{parentName:"p"},"None")," is such value does not exist."),(0,l.mdx)("p",null,"This function is available in ",(0,l.mdx)("inlineCode",{parentName:"p"},"bzl")," files, but attempt to call this\nfunction in context of ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," file evaluation results in an error.\nThis restriction can be lifted in the future."),(0,l.mdx)("p",null,"Per-package values are ",(0,l.mdx)("strong",{parentName:"p"},"not")," accessible as global symbols in ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," files.\nWe may reconsider it in the future."),(0,l.mdx)("h3",{id:"read_config"},(0,l.mdx)("inlineCode",{parentName:"h3"},"read_config")),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," files may call ",(0,l.mdx)("inlineCode",{parentName:"p"},"read_config")," function."))}m.isMDXComponent=!0}}]);