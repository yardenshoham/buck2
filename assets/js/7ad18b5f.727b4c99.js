"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5733],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>u,MDXProvider:()=>m,mdx:()=>v,useMDXComponents:()=>p,withMDXComponents:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),c=function(e){return function(t){var n=p(t.components);return a.createElement(e,o({},t,{components:n}))}},p=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,d=c["".concat(i,".").concat(m)]||c[m]||h[m]||o;return n?a.createElement(d,s(s({ref:t},u),{},{components:n})):a.createElement(d,s({ref:t},u))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},99202:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const o={id:"incremental_actions",title:"Incremental Actions"},i=void 0,s={unversionedId:"rule_authors/incremental_actions",id:"rule_authors/incremental_actions",title:"Incremental Actions",description:"It's possible to make certain Buck2 actions behave incrementally, that is, to produce results for a current invocation based on the result from the previous run. Incrementality could significantly improve performance of some actions such as packaging (such as Apple App Bundles) or linking (MSVC incremental linking).",source:"@site/../docs/rule_authors/incremental_actions.md",sourceDirName:"rule_authors",slug:"/rule_authors/incremental_actions",permalink:"/docs/rule_authors/incremental_actions",draft:!1,tags:[],version:"current",frontMatter:{id:"incremental_actions",title:"Incremental Actions"},sidebar:"manualSidebar",previous:{title:"Optimization",permalink:"/docs/rule_authors/optimization"},next:{title:"Alias",permalink:"/docs/rule_authors/alias"}},l={},u=[],c={toc:u};function p(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"It's possible to make certain Buck2 actions behave incrementally, that is, to produce results for a current invocation based on the result from the previous run. Incrementality could significantly improve performance of some actions such as packaging (such as Apple App Bundles) or linking (MSVC incremental linking)."),(0,r.mdx)("p",null,"There are two essential requirements to make an action incremental:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"The result from the previous run should be accessible."),(0,r.mdx)("li",{parentName:"ul"},"An understanding of which parts of the result need to be updated; it should be easy to compare inputs from a previous run with inputs from the current run and detect those changed.")),(0,r.mdx)("p",null,"The only way to run user-defined commands in Buck2 is with ",(0,r.mdx)("inlineCode",{parentName:"p"},"ctx.actions.run"),". Both of the above requirements are met via its ",(0,r.mdx)("inlineCode",{parentName:"p"},"metadata_env_var"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"metadata_path")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"no_outputs_cleanup")," parameters."),(0,r.mdx)("p",null,"When the ",(0,r.mdx)("inlineCode",{parentName:"p"},"no_outputs_cleanup")," flag is turned on, Buck2 won't perform any deletion of old outputs for the action. That means the result from the previous run will be accessible, but the user script has to detect which parts of it should be deleted and perform a manual cleanup."),(0,r.mdx)("p",null,"When the ",(0,r.mdx)("inlineCode",{parentName:"p"},"metadata_env_var")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"metadata_path")," parameters are present, Buck2 will create a JSON file on a disk before actually executing the command. The file will contain a list of paths and hash digests for every command action input. All paths in the file are relative to the Buck2 project root. Symlinks are not included in metadata because it is possible for the user script to resolve symlink and use a resolved path to get the destination hash digest from action metadata if it's needed, as shown in the following JSON example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "version": 1,\n  "digests": [\n    {\n      "path": "buck-out/v2/gen/cell/configuration_hash/path/to/target/__target_name__/generated_file",\n      "digest": "da39a3ee5e6b4b0d3255bfef95601890afd80709:10"\n    },\n    ...\n  ]\n}\n')),(0,r.mdx)("p",null,"A user script that is run as a part of an action execution is responsible for parsing the JSON file."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"version")," field is bumped every time there is a non-backwards compatible change to the format of the file. The user script should verify that the provided data is of a supported version and should be updated accordingly when the current version is newer than the supported one."),(0,r.mdx)("p",null,"The path of the JSON file is provided to the user script via an environment variable with a key equal to ",(0,r.mdx)("inlineCode",{parentName:"p"},"metadata_env_var"),". The user is able to specify the part of the path relative to the result directory via ",(0,r.mdx)("inlineCode",{parentName:"p"},"metadata_path"),"."),(0,r.mdx)("p",null,"For example, if some rule implementation has the following code:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'result = ctx.actions.declare_output("result")\ncommand = cmd_args(["my_script.py", "--output", result.as_output()])\nctx.actions.run(\n    command,\n    category = "my_category",\n    metadata_env_var = "ACTION_METADATA",\n    metadata_path = "action_metadata.json",\n    no_outputs_cleanup = True,\n)\n')),(0,r.mdx)("p",null,"Then ",(0,r.mdx)("inlineCode",{parentName:"p"},"my_script.py")," will be executed as:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-shell"},"ACTION_METADATA=project/relative/path/to/target/action_metadata.json my_script.py --output resolved/path/to/result\n")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"my_script.py")," is responsible for reading the ",(0,r.mdx)("inlineCode",{parentName:"p"},"ACTION_METADATA")," environment variable and parsing a JSON file with the action metadata."),(0,r.mdx)("p",null,"Parsed metadata provides information about inputs for the current run, but the script needs somehow to obtain similar information about inputs from the previous run. Such information could just be another output of the user script (as with the previous result, it won't be deleted when ",(0,r.mdx)("inlineCode",{parentName:"p"},"no_outputs_cleanup = True"),"). The Format of such a file is an implementation detail of the user script, but at the very least it should contain a list of every source that was used to form the result and hash digests for such sources."),(0,r.mdx)("p",null,"The rule implementation would look something like the following:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'result = ctx.actions.declare_output("result")\nstate = ctx.actions.declare_output("incremental_state.json")\ncommand = cmd_args(["my_script.py", "--output", result.as_output(), "--incremental-state", state.as_output()])\nctx.actions.run(\n    command,\n    category = "my_category",\n    metadata_env_var = "ACTION_METADATA",\n    metadata_path = "action_metadata.json",\n    no_outputs_cleanup = True,\n)\n')),(0,r.mdx)("p",null,"The user script would then:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"Parse ",(0,r.mdx)("inlineCode",{parentName:"li"},"incremental_state.json"),' and delete it. Deletion prior to amending the result is important so it doesn\'t result in a situation where an incremental state file is out of sync with the result when the user script fails while changing the result. Such a corrupted state might lead to subsequent incorrect builds reported as "successful".'),(0,r.mdx)("li",{parentName:"ol"},"Parse action metadata file, compute what is needed to update the result, and amend it accordingly."),(0,r.mdx)("li",{parentName:"ol"},"Calculate the new state and write it into the new ",(0,r.mdx)("inlineCode",{parentName:"li"},"incremental_state.json"),".")))}p.isMDXComponent=!0}}]);