"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6738],{3905:(e,t,i)=>{i.r(t),i.d(t,{MDXContext:()=>l,MDXProvider:()=>p,mdx:()=>b,useMDXComponents:()=>u,withMDXComponents:()=>d});var n=i(67294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(e[n]=i[n])}return e},r.apply(this,arguments)}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function c(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var l=n.createContext({}),d=function(e){return function(t){var i=u(t.components);return n.createElement(e,r({},t,{components:i}))}},u=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):s(s({},t),e)),i},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(i),p=a,m=d["".concat(o,".").concat(p)]||d[p]||f[p]||r;return i?n.createElement(m,s(s({ref:t},l),{},{components:i})):n.createElement(m,s({ref:t},l))}));function b(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,o=new Array(r);o[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<r;l++)o[l]=i[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}h.displayName="MDXCreateElement"},33062:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var n=i(87462),a=(i(67294),i(3905));const r={},o="buck2 audit visibility command",s={unversionedId:"rfcs/audit_visibility",id:"rfcs/audit_visibility",title:"buck2 audit visibility command",description:"Context",source:"@site/../docs/rfcs/audit_visibility.md",sourceDirName:"rfcs",slug:"/rfcs/audit_visibility",permalink:"/docs/rfcs/audit_visibility",draft:!1,tags:[],version:"current",frontMatter:{}},c={},l=[{value:"Context",id:"context",level:2},{value:"Proposed Solution: <code>audit visibility</code> command",id:"proposed-solution-audit-visibility-command",level:2},{value:"Usage and Invocation",id:"usage-and-invocation",level:2}],d={toc:l};function u(e){let{components:t,...i}=e;return(0,a.mdx)("wrapper",(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"buck2-audit-visibility-command"},(0,a.mdx)("inlineCode",{parentName:"h1"},"buck2 audit visibility")," command"),(0,a.mdx)("h2",{id:"context"},"Context"),(0,a.mdx)("p",null,"Buck has a concept of ",(0,a.mdx)("a",{parentName:"p",href:"/docs/legacy/concepts/visibility"},"Visibility")," for every target.\nIt allows users to define, for each target, the targets it can depend on and targets that can depend on it.\nVisibility is specified as an allowlist of targets/target patterns, and any target used that falls outside of the allowlist fails visibility checking.\nVisibility pattern can be specified on ",(0,a.mdx)("inlineCode",{parentName:"p"},"visibility")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"within_view")," attributes in buildfiles and ",(0,a.mdx)("a",{parentName:"p",href:"https://www.internalfb.com/intern/wiki/Buck-users/Key_Concepts/Package_Files/"},"PACKAGE files"),"."),(0,a.mdx)("p",null,"Visibility is important to lots of codebase maintainers because it can be used to keep projects from pulling in unwanted dependencies.\nAs some examples, App Core teams are using Buck visibility as a ",(0,a.mdx)("a",{parentName:"p",href:"https://fb.prod.workplace.com/groups/2292177024436518/permalink/3112235492430663/"},"replacement to current supermodules for protecting app modularity"),".\nInstagram's using visibility to ",(0,a.mdx)("a",{parentName:"p",href:"https://fb.prod.workplace.com/groups/devx.build.bffs/posts/5169450219756775/?comment_id=5169500636418400"},"protect modularity and define Link Groups used for build speed optimizations"),".\nThere's interest from various DevX teams in using Buck visibility on ",(0,a.mdx)("a",{parentName:"p",href:"https://www.internalfb.com/intern/wiki/Buck-users/Key_Concepts/Package_Files/"},"PACKAGE files")," to ",(0,a.mdx)("a",{parentName:"p",href:"https://fb.prod.workplace.com/groups/devx.build.bffs/posts/5169450219756775/"},"enforce repo boundaries, which will allow target determinators to migrate off of sparse profiles and onto Eden"),", although visibility in its current form is likely not fit for enforcing such repo boundaries.\nVisibility has also been used to enforce ",(0,a.mdx)("a",{parentName:"p",href:"https://fb.workplace.com/groups/buckeng/permalink/4392940254087889/"},"requirements that only certain targets are allowed to depend on targets in fbcode/scripts"),"."),(0,a.mdx)("p",null,"For perf reasons, buck2 doesn't always enforce visibility.\nInstead, it only enforces visibility on construction of the configured target graph.\nVisibility checking is expensive memory-wise because it requires tracking all deps at each node.\nWhen constructing configured target graph, this cost is already paid for when buck2 checks transitive target compatibility.\nWhen constructing the unconfigured target graph, however, this is costly, so we avoid checking visibility there.\n(Note that buck does not allow you to specify selects in visibility attributes.)"),(0,a.mdx)("p",null,"In practice, this means that commands like ",(0,a.mdx)("inlineCode",{parentName:"p"},"cquery")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"build")," can enforce visibility whereas commands like ",(0,a.mdx)("inlineCode",{parentName:"p"},"uquery")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"targets")," cannot.\nHaving visibility checked only on the configured target graph is problematic for 2 reasons:"),(0,a.mdx)("p",null,"1) Visibility is only checked on configured deps after selects are resolved, so it's possible for a target to pass visibility checking in one configuration but fail visibility checking in another.\nFor example, a target may pass visibility checking on a linux configuration but fail visibility checking on mac configuration if it has a bad mac-only dependency.\nThis makes visibility enforcement more difficult because now you have to query the same graph in both linux and mac configuration before you know that visibility is always valid."),(0,a.mdx)("p",null,"2) Uquery (querying the unconfigured target graph) has better performance than cquery (querying the configured target graph).\nBig-O wise, uquery scales with O(# of targets) whereas cquery scales with O((# number of configurations) x (# of targets)).\nHaving a way to check visibility on unconfigured target graph can be much cheaper than doing so on configured target graph."),(0,a.mdx)("h2",{id:"proposed-solution-audit-visibility-command"},"Proposed Solution: ",(0,a.mdx)("inlineCode",{parentName:"h2"},"audit visibility")," command"),(0,a.mdx)("p",null,"It's clear that we need a way to check visibility on the unconfigured target graph, but we don't want ",(0,a.mdx)("inlineCode",{parentName:"p"},"buck2 uquery")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"buck2 targets")," to regress in memory use.\nTo get the best of both worlds, I propose adding a separate command to buck2, ",(0,a.mdx)("inlineCode",{parentName:"p"},"buck2 audit visibility"),", that will check visibility on the unconfigured target graph.\nInstead of checking on construction of the unconfigured target graph, this command will check after construction, which will avoid any memory regression.\nThe tradeoff is that the visibility checking won't be cached, and rerunning ",(0,a.mdx)("inlineCode",{parentName:"p"},"audit visibility")," will rerun visibility checking on each invocation."),(0,a.mdx)("h2",{id:"usage-and-invocation"},"Usage and Invocation"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"buck2 audit visibility")," command will take in a list of target patterns as well as common build args like config flags and mode files as args.\nIt will construct the unconfigured target graph based on the ",(0,a.mdx)("strong",{parentName:"p"},"transitive deps")," of those targets and check that this graph has valid visibility.\nChecking transitive deps matches the behavior of visibility checking on cquery, but we may revisit this decision in the future if there is a need for just verifying the immediate dependencies."),(0,a.mdx)("p",null,"For example, an invocation to check visibility on the transitive closure of fbobjc can be"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-shell"},"buck2 audit visibility fbsource//fbobjc/...\n")),(0,a.mdx)("p",null,"It cannot be used to check that a target has a valid visibility with respect to targets outside of the transitive closure of its deps.\nFor example, ",(0,a.mdx)("inlineCode",{parentName:"p"},"buck2 audit visibility fbcode//buck2/starlark-rust/starlark:starlark")," will just check that all transitive deps of ",(0,a.mdx)("inlineCode",{parentName:"p"},"starlark")," target (including ",(0,a.mdx)("inlineCode",{parentName:"p"},"starlark")," target) have valid visibility\nwith respect to each other.\nIt will not check that any targets that depend on ",(0,a.mdx)("inlineCode",{parentName:"p"},"starlark")," respect ",(0,a.mdx)("inlineCode",{parentName:"p"},"starlark")," target's visibility attribute."))}u.isMDXComponent=!0}}]);