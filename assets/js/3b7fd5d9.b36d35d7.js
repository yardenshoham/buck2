"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9518],{3905:(e,t,a)=>{a.r(t),a.d(t,{MDXContext:()=>d,MDXProvider:()=>c,mdx:()=>x,useMDXComponents:()=>p,withMDXComponents:()=>m});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},r.apply(this,arguments)}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var d=n.createContext({}),m=function(e){return function(t){var a=p(t.components);return n.createElement(e,r({},t,{components:a}))}},p=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(a),c=i,u=m["".concat(o,".").concat(c)]||m[c]||h[c]||r;return a?n.createElement(u,l(l({ref:t},d),{},{components:a})):n.createElement(u,l({ref:t},d))}));function x(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},17847:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var n=a(87462),i=(a(67294),a(3905));const r={id:"actions"},o="actions type",l={unversionedId:"api/build/actions",id:"api/build/actions",title:"actions type",description:"actions.anon\\_target",source:"@site/../docs/api/build/actions.generated.md",sourceDirName:"api/build",slug:"/api/build/actions",permalink:"/docs/api/build/actions",draft:!1,tags:[],version:"current",frontMatter:{id:"actions"},sidebar:"manualSidebar",previous:{title:"globals",permalink:"/docs/api/build/globals"},next:{title:"artifact type",permalink:"/docs/api/build/artifact"}},s={},d=[{value:"actions.anon_target",id:"actionsanon_target",level:2},{value:"actions.anon_targets",id:"actionsanon_targets",level:2},{value:"actions.artifact_promise",id:"actionsartifact_promise",level:2},{value:"actions.artifact_tag",id:"actionsartifact_tag",level:2},{value:"actions.cas_artifact",id:"actionscas_artifact",level:2},{value:"actions.copied_dir",id:"actionscopied_dir",level:2},{value:"actions.copy_dir",id:"actionscopy_dir",level:2},{value:"actions.copy_file",id:"actionscopy_file",level:2},{value:"actions.declare_output",id:"actionsdeclare_output",level:2},{value:"actions.download_file",id:"actionsdownload_file",level:2},{value:"actions.dynamic_output",id:"actionsdynamic_output",level:2},{value:"actions.run",id:"actionsrun",level:2},{value:"actions.symlink_dir",id:"actionssymlink_dir",level:2},{value:"actions.symlink_file",id:"actionssymlink_file",level:2},{value:"actions.symlinked_dir",id:"actionssymlinked_dir",level:2},{value:"actions.tset",id:"actionstset",level:2},{value:"actions.write",id:"actionswrite",level:2},{value:"actions.write_json",id:"actionswrite_json",level:2}],m={toc:d};function p(e){let{components:t,...a}=e;return(0,i.mdx)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"actions-type"},(0,i.mdx)("inlineCode",{parentName:"h1"},"actions")," type"),(0,i.mdx)("h2",{id:"actionsanon_target"},"actions.anon","_","target"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.anon_target(rule: "rule", attrs: {str.type: ""}) -> "promise"\n')),(0,i.mdx)("p",null,"An anonymous target is defined by the hash of its attributes, rather than its name. During analysis, rules can define and access the providers of anonymous targets before producing their own providers. Two distinct rules might ask for the same anonymous target, sharing the work it performs."),(0,i.mdx)("p",null,"For more details see ",(0,i.mdx)("a",{parentName:"p",href:"https://buck2.build/docs/rule_authors/anon_targets/"},"https://buck2.build/docs/rule_authors/anon_targets/")),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"actionsanon_targets"},"actions.anon","_","targets"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.anon_targets(rules: [("rule", {str.type: ""})]) -> "promise"\n')),(0,i.mdx)("p",null,"Generate a series of anonymous targets"),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"actionsartifact_promise"},"actions.artifact","_","promise"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.artifact_promise(\n    promise: "promise",\n    *,\n    short_path: [None, str.type] = None\n) -> "promise_artifact"\n')),(0,i.mdx)("p",null,"Converts a promise to an artifact. If the promise later resolves to a non-artifact, it is an error. Takes in an optional named parameter ",(0,i.mdx)("inlineCode",{parentName:"p"},"short_path")," that can be used to access the short path before the promise is resolved. It will be validated that the provided short path matches the built artifact's short path after analysis happens and the promise has been resolved."),(0,i.mdx)("p",null,"For more details see ",(0,i.mdx)("a",{parentName:"p",href:"https://buck2.build/docs/rule_authors/anon_targets/"},"https://buck2.build/docs/rule_authors/anon_targets/"),"."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"actionsartifact_tag"},"actions.artifact","_","tag"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.artifact_tag() -> "artifact_tag"\n')),(0,i.mdx)("p",null,"Allocate a new input tag. Used with the ",(0,i.mdx)("inlineCode",{parentName:"p"},"dep_files")," argument to ",(0,i.mdx)("inlineCode",{parentName:"p"},"run"),"."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"actionscas_artifact"},"actions.cas","_","artifact"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.cas_artifact(\n    output: ["artifact", "output_artifact", "promise_artifact", str.type],\n    digest: str.type,\n    use_case: str.type,\n    /,\n    *,\n    expires_after_timestamp: int.type,\n    is_executable: bool.type = False,\n    is_tree: bool.type = False,\n    is_directory: bool.type = False\n) -> "artifact"\n')),(0,i.mdx)("p",null,"Downloads a CAS artifact to an output"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"digest"),": must look like ",(0,i.mdx)("inlineCode",{parentName:"li"},"SHA1:SIZE")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"use_case"),": your RE use case"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"expires_after_timestamp"),": must be a UNIX timestamp. Your digest's TTL must exceed this timestamp. Your build will break once the digest expires, so make sure the expiry is long enough (preferably, in years)."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"is_executable")," (optional): indicates the resulting file should be marked with executable permissions")),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"actionscopied_dir"},"actions.copied","_","dir"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.copied_dir(\n    output: ["artifact", "output_artifact", "promise_artifact", str.type],\n    srcs: {str.type: ["artifact", "promise_artifact"]},\n    /\n) -> "artifact"\n')),(0,i.mdx)("p",null,"Returns an ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact")," which is a directory containing copied files. The srcs must be a dictionary of path (as string, relative to the result directory) to the bound ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact"),", which will be laid out in the directory."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"actionscopy_dir"},"actions.copy","_","dir"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.copy_dir(\n    dest: ["artifact", "output_artifact", "promise_artifact", str.type],\n    src: ["artifact", "promise_artifact"],\n    /\n) -> "artifact"\n')),(0,i.mdx)("p",null,"Make a copy of a directory."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"actionscopy_file"},"actions.copy","_","file"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.copy_file(\n    dest: ["artifact", "output_artifact", "promise_artifact", str.type],\n    src: ["artifact", "promise_artifact"],\n    /\n) -> "artifact"\n')),(0,i.mdx)("p",null,"Copies the source ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact")," to the destination (which can be a string representing a filename or an output ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact"),") and returns the output ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact"),". The copy works for files or directories."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"actionsdeclare_output"},"actions.declare","_","output"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.declare_output(\n    prefix: str.type,\n    filename: str.type = _,\n    /,\n    *,\n    dir: bool.type = False\n) -> "artifact"\n')),(0,i.mdx)("p",null,"Returns an unbound ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact")," which must be bound before analysis terminates. The usual way of binding an artifact is with ",(0,i.mdx)("inlineCode",{parentName:"p"},"ctx.actions.run"),"."),(0,i.mdx)("p",null,"To construct an artifact with the name ",(0,i.mdx)("inlineCode",{parentName:"p"},"foo"),", call ",(0,i.mdx)("inlineCode",{parentName:"p"},'ctx.actions.declare_output("foo")'),". Artifacts from a single target may not\nhave the same name, so if you then want a second artifact also named ",(0,i.mdx)("inlineCode",{parentName:"p"},"foo")," you need to supply a prefix, e.g.\n",(0,i.mdx)("inlineCode",{parentName:"p"},'ctx.actions.declare_output("directory", "foo")'),". The artifact will still report it has name ",(0,i.mdx)("inlineCode",{parentName:"p"},"foo"),", but will be located at\n",(0,i.mdx)("inlineCode",{parentName:"p"},"directory/foo"),"."),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"dir")," argument should be set to ",(0,i.mdx)("inlineCode",{parentName:"p"},"True")," if the binding will be a directory."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"actionsdownload_file"},"actions.download","_","file"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.download_file(\n    output: ["artifact", "output_artifact", "promise_artifact", str.type],\n    url: str.type,\n    /,\n    *,\n    vpnless_url: [None, str.type] = None,\n    sha1: [None, str.type] = None,\n    sha256: [None, str.type] = None,\n    is_executable: bool.type = False,\n    is_deferrable: bool.type = False\n) -> "artifact"\n')),(0,i.mdx)("p",null,"Downloads a URL to an output (filename as string or output artifact). The file at the URL must have the given sha1 or the command will fail. The optional parameter is_executable indicates whether the resulting file should be marked with executable permissions. (Meta-internal) The optional parameter vpnless_url indicates a url from which this resource can be downloaded off VPN; this has the same restrictions as ",(0,i.mdx)("inlineCode",{parentName:"p"},"url")," above."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"actionsdynamic_output"},"actions.dynamic","_","output"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.dynamic_output(\n    *,\n    dynamic: ["artifact"],\n    inputs: ["artifact"],\n    outputs: [["artifact", "output_artifact"]],\n    f\n) -> None\n')),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"dynamic_output")," allows a rule to use information that was not available when the rule was first run at analysis time. Examples include things like Distributed ThinLTO (where the index file is created by another action) or OCaml builds (where the dependencies are created by ",(0,i.mdx)("inlineCode",{parentName:"p"},"ocamldeps"),")."),(0,i.mdx)("p",null,"The arguments are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"dynamic")," - a list of artifacts whose values will be available in the function. These will be built before the function is run."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"inputs")," - a container of artifacts (",(0,i.mdx)("inlineCode",{parentName:"li"},"cmd_args"),", list of artifacts, and so on).",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"These inputs must include all the inputs that are referenced by the body of the function argument, apart from those listed in ",(0,i.mdx)("inlineCode",{parentName:"li"},"dynamic")," and ",(0,i.mdx)("inlineCode",{parentName:"li"},"outputs"),": extra inputs may be passed that are not used."),(0,i.mdx)("li",{parentName:"ul"},"The inputs are used for ",(0,i.mdx)("inlineCode",{parentName:"li"},"buck2 aquery")," functionality, but do not cause speculative building. In fact, these inputs may form a cycle with other ",(0,i.mdx)("inlineCode",{parentName:"li"},"dynamic_output")," actions if they were all required."),(0,i.mdx)("li",{parentName:"ul"},"In the future, it may be possible to not pass all the inputs if the repo is set to permissive mode, allowing a more powerful form of dynamic dependencies."))),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"outputs")," - a list of unbound artifacts (created with ",(0,i.mdx)("inlineCode",{parentName:"li"},"declare_artifact"),") which will be bound by the function."),(0,i.mdx)("li",{parentName:"ul"},"The function argument is given 3 arguments:",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ctx")," (context) - which is the same as that passed to the initial rule analysis."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"outputs")," - using one of the artifacts from the ",(0,i.mdx)("inlineCode",{parentName:"li"},"dynamic_output"),"'s ",(0,i.mdx)("inlineCode",{parentName:"li"},"outputs")," (example usage: ",(0,i.mdx)("inlineCode",{parentName:"li"},"outputs[artifact_from_dynamic_output_outputs]"),") gives an unbounded artifact. The function argument must use its ",(0,i.mdx)("inlineCode",{parentName:"li"},"outputs")," argument to bind output artifacts, rather than reusing artifacts from the outputs passed into ",(0,i.mdx)("inlineCode",{parentName:"li"},"dynamic_output")," directly."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"artifacts")," - using one of the artifacts from ",(0,i.mdx)("inlineCode",{parentName:"li"},"dynamic")," (example usage: ",(0,i.mdx)("inlineCode",{parentName:"li"},"artifacts[artifact_from_dynamic])")," gives an artifact value containing the methods ",(0,i.mdx)("inlineCode",{parentName:"li"},"read_string"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"read_lines"),", and ",(0,i.mdx)("inlineCode",{parentName:"li"},"read_json")," to obtain the values from the disk in various formats.  Anything too complex should be piped through a Python script for transformation to JSON."))),(0,i.mdx)("li",{parentName:"ul"},"The function must call ",(0,i.mdx)("inlineCode",{parentName:"li"},"ctx.actions")," (probably ",(0,i.mdx)("inlineCode",{parentName:"li"},"ctx.actions.run"),") to bind all outputs. It can examine the values of the dynamic variables and depends on the inputs.",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"The function will usually be a ",(0,i.mdx)("inlineCode",{parentName:"li"},"def"),", as ",(0,i.mdx)("inlineCode",{parentName:"li"},"lambda")," in Starlark does not allow statements, making it quite underpowered.")))),(0,i.mdx)("p",null,"For full details see http://localhost:3000/docs/rule_authors/dynamic_dependencies/."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"actionsrun"},"actions.run"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.run(\n    arguments,\n    /,\n    *,\n    category: str.type,\n    identifier: [None, str.type] = None,\n    env: {str.type: ""} = _,\n    local_only: bool.type = False,\n    prefer_local: bool.type = False,\n    prefer_remote: bool.type = False,\n    low_pass_filter: bool.type = True,\n    always_print_stderr: bool.type = False,\n    weight: int.type = _,\n    weight_percentage: int.type = _,\n    dep_files: {str.type: "artifact_tag"} = _,\n    metadata_env_var: str.type = _,\n    metadata_path: str.type = _,\n    no_outputs_cleanup: bool.type = False,\n    allow_cache_upload: bool.type = False,\n    force_full_hybrid_if_capable: bool.type = False,\n    exe: ["RunInfo", "WorkerRunInfo"] = _\n) -> None\n')),(0,i.mdx)("p",null,"Runs a command"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"arguments"),": must be of type ",(0,i.mdx)("inlineCode",{parentName:"li"},"cmd_args"),", or a type convertible to such (such as a list of strings and artifacts) and must contain at least one ",(0,i.mdx)("inlineCode",{parentName:"li"},".as_output()")," artifact"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"category"),": category and identifier - when used together, identify the action in Buck2's event stream, and must be unique for a given target"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"weight"),": used to note how heavy the command is and will typically be set to a higher value to indicate that less such commands should be run in parallel (if running locally)"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"no_outputs_cleanup"),": if this flag is set then Buck2 won't clean the outputs of a previous build that might be present on a disk; in which case, command from arguments should be responsible for the cleanup (that is useful, for example, when an action is supporting incremental mode and its outputs are based on result from a previous build)"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"metadata_env_var")," and ",(0,i.mdx)("inlineCode",{parentName:"li"},"meadata_path")," should be used together: both set or both unset",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"metadata_path"),": defines a path relative to the result directory for a file with action metadata, which will be created right before the command will be run."),(0,i.mdx)("li",{parentName:"ul"},"Metadata contains the path relative to the Buck2 project root and hash digest for every action input (this excludes symlinks as they could be resolved by a user script if needed). The resolved path relative to the Buck2 project for the metadata file will be passed to command from arguments, via the environment variable, with its name set by ",(0,i.mdx)("inlineCode",{parentName:"li"},"metadata_env_var")),(0,i.mdx)("li",{parentName:"ul"},"Both ",(0,i.mdx)("inlineCode",{parentName:"li"},"metadata_env_var")," and ",(0,i.mdx)("inlineCode",{parentName:"li"},"metadata_path")," are useful when making actions behave in an incremental manner (for details, see ",(0,i.mdx)("a",{parentName:"li",href:"https://buck2.build/docs/rule_authors/incremental_actions/"},"Incremental Actions"),")"))),(0,i.mdx)("li",{parentName:"ul"},"The ",(0,i.mdx)("inlineCode",{parentName:"li"},"prefer_local"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"prefer_remote")," and ",(0,i.mdx)("inlineCode",{parentName:"li"},"local_only")," options allow selecting where the\naction should run if the executor selected for this target is a hybrid executor.",(0,i.mdx)("pre",{parentName:"li"},(0,i.mdx)("code",{parentName:"pre"},'* All those options disable concurrent execution: the action will run on the preferred\nplatform first (concurrent execution only happens with a "full" hybrid executor).\n* Execution may be retried on the "non-preferred" platform if it fails due to a\ntransient error, except for `local_only`, which does not allow this.\n* If the executor selected is a remote-only executor and you use `local_only`, that\'s\nan error. The other options will not raise errors.\n* Setting more than one of those options is an error.\n* Those flags behave the same way as the equivalent `--prefer-remote`, `--prefer-local`\nand `--local-only` CLI flags. The CLI flags take precedence.\n* The `force_full_hybrid_if_capable` option overrides the `use_limited_hybrid` hybrid.\nThe options listed above take precedence if set.\n')))),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"actionssymlink_dir"},"actions.symlink","_","dir"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.symlink_dir(\n    dest: ["artifact", "output_artifact", "promise_artifact", str.type],\n    src: ["artifact", "promise_artifact"],\n    /\n) -> "artifact"\n')),(0,i.mdx)("p",null,"Create a symlink to a directory."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"actionssymlink_file"},"actions.symlink","_","file"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.symlink_file(\n    dest: ["artifact", "output_artifact", "promise_artifact", str.type],\n    src: ["artifact", "promise_artifact"],\n    /\n) -> "artifact"\n')),(0,i.mdx)("p",null,"Creates a symlink to the source ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact")," at the destination (which can be a string representing a filename or an output ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact"),") and returns the output ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact"),". The symlink works for files or directories."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"actionssymlinked_dir"},"actions.symlinked","_","dir"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.symlinked_dir(\n    output: ["artifact", "output_artifact", "promise_artifact", str.type],\n    srcs: {str.type: ["artifact", "promise_artifact"]},\n    /\n) -> "artifact"\n')),(0,i.mdx)("p",null,"Returns an ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact")," that is a directory containing symlinks. The srcs must be a dictionary of path (as string, relative to the result directory) to bound ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact"),", which will be laid out in the directory."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"actionstset"},"actions.tset"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.tset(\n    definition: "transitive_set_definition",\n    /,\n    value = _,\n    children: iter("") = _\n)\n')),(0,i.mdx)("p",null,"Creates a new transitive set. For details, see ",(0,i.mdx)("a",{parentName:"p",href:"https://buck2.build/docs/rule_authors/transitive_sets/"},"https://buck2.build/docs/rule_authors/transitive_sets/"),"."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"actionswrite"},"actions.write"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.write(\n    output: ["artifact", "output_artifact", "promise_artifact", str.type],\n    content,\n    /,\n    *,\n    is_executable: bool.type = False,\n    allow_args: bool.type = False,\n    with_inputs: bool.type = False\n) -> ["artifact", ("artifact", ["artifact"])]\n')),(0,i.mdx)("p",null,"Returns an ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact")," whose contents are content"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"is_executable")," (optional): indicates whether the resulting file should be marked with executable permissions"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"allow_args")," (optional): must be set to ",(0,i.mdx)("inlineCode",{parentName:"li"},"True")," if you want to write parameter arguments to the file (in particular, macros that write to file)",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"If it is true, the result will be a pair of the ",(0,i.mdx)("inlineCode",{parentName:"li"},"artifact")," containing content and a list of artifact values that were written by macros, which should be used in hidden fields or similar")))),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"actionswrite_json"},"actions.write","_","json"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def actions.write_json(\n    output: ["artifact", "output_artifact", "promise_artifact", str.type],\n    content,\n    /,\n    *,\n    with_inputs: bool.type = False\n) -> ["artifact", "write_json_cli_args"]\n')),(0,i.mdx)("p",null,"Returns an ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact")," whose contents are content written as a JSON value."),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"filename"),": can be a string, or an existing artifact created with ",(0,i.mdx)("inlineCode",{parentName:"li"},"declare_output")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"content"),":  must be composed of the basic json types (boolean, number, string, list/tuple, dictionary) plus artifacts and command lines",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"An artifact will be written as a string containing the path"),(0,i.mdx)("li",{parentName:"ul"},"A command line will be written as a list of strings, unless ",(0,i.mdx)("inlineCode",{parentName:"li"},"joined=True")," is set, in which case it will be a string"))),(0,i.mdx)("li",{parentName:"ul"},"If you pass ",(0,i.mdx)("inlineCode",{parentName:"li"},"with_inputs = True"),", you'll get back a ",(0,i.mdx)("inlineCode",{parentName:"li"},"cmd_args")," that expands to the JSON file but carries all the underlying inputs as dependencies (so you don't have to use, for example, ",(0,i.mdx)("inlineCode",{parentName:"li"},"hidden")," for them to be added to an action that already receives the JSON file)")))}p.isMDXComponent=!0}}]);