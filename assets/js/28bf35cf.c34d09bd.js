"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3104],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>s,MDXProvider:()=>c,mdx:()=>x,useMDXComponents:()=>m,withMDXComponents:()=>u});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},r.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),u=function(e){return function(n){var t=m(n.components);return a.createElement(e,r({},n,{components:t}))}},m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=m(t),c=i,p=u["".concat(o,".").concat(c)]||u[c]||f[c]||r;return t?a.createElement(p,l(l({ref:n},s),{},{components:t})):a.createElement(p,l({ref:n},s))}));function x(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=h;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},45970:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=t(87462),i=(t(67294),t(3905));const r={id:"dynamic_dependencies",title:"Dynamic Dependencies"},o=void 0,l={unversionedId:"rule_authors/dynamic_dependencies",id:"rule_authors/dynamic_dependencies",title:"Dynamic Dependencies",description:"Dynamic dependencies allow a rule to use information that was not available when the rule was first run at analysis time. Dynamic dependencies in Buck2 are implemented using dynamic_output and are restricted in their power compared to fully generic dynamic dependencies.",source:"@site/../docs/rule_authors/dynamic_dependencies.md",sourceDirName:"rule_authors",slug:"/rule_authors/dynamic_dependencies",permalink:"/docs/rule_authors/dynamic_dependencies",draft:!1,tags:[],version:"current",frontMatter:{id:"dynamic_dependencies",title:"Dynamic Dependencies"},sidebar:"manualSidebar",previous:{title:"Configuration Transitions",permalink:"/docs/rule_authors/configuration_transitions"},next:{title:"Anonymous Targets",permalink:"/docs/rule_authors/anon_targets"}},d={},s=[{value:"Implementation",id:"implementation",level:2}],u=(m="FbInternalOnly",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",e)});var m;const c={toc:s};function p(e){let{components:n,...t}=e;return(0,i.mdx)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"Dynamic dependencies allow a rule to use information that was not available when the rule was first run at analysis time. Dynamic dependencies in Buck2 are implemented using ",(0,i.mdx)("inlineCode",{parentName:"p"},"dynamic_output")," and are restricted in their power compared to fully generic dynamic dependencies."),(0,i.mdx)("p",null,"A rule for a target is run with the attributes of the target, plus the providers of its attribute dependencies, which contain artifacts. Those values (but not the artifact contents) are all available directly and immediately when running the rule. The rule generates providers containing artifacts.  Using ",(0,i.mdx)("inlineCode",{parentName:"p"},"dynamic_output"),", a rule can read the contents of an artifact to produce new artifacts and bind existing artifacts, which were already returned in providers."),(0,i.mdx)("p",null,"Examples of rules requiring dynamic dependencies include:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Distributed ThinLTO, where the index file says what the dependencies are."),(0,i.mdx)("li",{parentName:"ul"},"OCaml builds, where the dependencies between source files can only be obtained from running ",(0,i.mdx)("inlineCode",{parentName:"li"},"ocamldeps"),"."),(0,i.mdx)("li",{parentName:"ul"},"Erlang header files, where only a subset of the available headers are accessed, which can be determined by reading the source file."),(0,i.mdx)("li",{parentName:"ul"},"Erlang BEAM files, where some subset of BEAM files must be compiled in a given order, as they provide features like compiler plugins, but most can be compiled in parallel.")),(0,i.mdx)(u,{mdxType:"FbInternalOnly"},(0,i.mdx)("p",null,"The original design document with discussion is available ",(0,i.mdx)("a",{parentName:"p",href:"https://docs.google.com/document/d/1K8RgvDMvdDFsLWAu0cehauJstHZaFe-7NeaAqWe4-L4/edit"},"here"),".")),(0,i.mdx)("h2",{id:"implementation"},"Implementation"),(0,i.mdx)("p",null,"Buck2 provides the following function:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"ctx.actions.dynamic_output(dynamic, inputs, outputs, lambda ctx: \u2026)\n")),(0,i.mdx)("p",null,"The arguments are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"dynamic")," - a list of artifacts whose values will be available in the function. These will be built before the function is run."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"inputs")," - a container of artifacts (",(0,i.mdx)("inlineCode",{parentName:"li"},"cmd_args"),", list of artifacts, and so on).",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"These inputs must include all the inputs that are referenced by the body of the function argument, apart from those listed in ",(0,i.mdx)("inlineCode",{parentName:"li"},"dynamic")," and ",(0,i.mdx)("inlineCode",{parentName:"li"},"outputs"),": extra inputs may be passed that are not used."),(0,i.mdx)("li",{parentName:"ul"},"The inputs are used for ",(0,i.mdx)("inlineCode",{parentName:"li"},"buck2 aquery")," functionality, but do not cause speculative building. In fact, these inputs may form a cycle with other ",(0,i.mdx)("inlineCode",{parentName:"li"},"dynamic_output")," actions if they were all required."),(0,i.mdx)("li",{parentName:"ul"},"In the future, it may be possible to not pass all the inputs if the repo is set to permissive mode, allowing a more powerful form of dynamic dependencies."))),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"outputs")," - a list of unbound artifacts (created with ",(0,i.mdx)("inlineCode",{parentName:"li"},"declare_artifact"),") which will be bound by the function."),(0,i.mdx)("li",{parentName:"ul"},"The function argument is given 3 arguments:",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ctx")," (context) - which is the same as that passed to the initial rule analysis."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"outputs")," - using one of the artifacts from the ",(0,i.mdx)("inlineCode",{parentName:"li"},"dynamic_output"),"'s ",(0,i.mdx)("inlineCode",{parentName:"li"},"outputs")," (example usage: ",(0,i.mdx)("inlineCode",{parentName:"li"},"outputs[artifact_from_dynamic_output_outputs]"),") gives an unbounded artifact. The function argument must use its ",(0,i.mdx)("inlineCode",{parentName:"li"},"outputs")," argument to bind output artifacts, rather than reusing artifacts from the outputs passed into ",(0,i.mdx)("inlineCode",{parentName:"li"},"dynamic_output")," directly."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"artifacts")," - using one of the artifacts from ",(0,i.mdx)("inlineCode",{parentName:"li"},"dynamic")," (example usage: ",(0,i.mdx)("inlineCode",{parentName:"li"},"artifacts[artifact_from_dynamic])")," gives an artifact value containing the methods ",(0,i.mdx)("inlineCode",{parentName:"li"},"read_string"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"read_lines"),", and ",(0,i.mdx)("inlineCode",{parentName:"li"},"read_json")," to obtain the values from the disk in various formats.  Anything too complex should be piped through a Python script for transformation to JSON."))),(0,i.mdx)("li",{parentName:"ul"},"The function must call ",(0,i.mdx)("inlineCode",{parentName:"li"},"ctx.actions")," (probably ",(0,i.mdx)("inlineCode",{parentName:"li"},"ctx.actions.run"),") to bind all outputs. It can examine the values of the dynamic variables and depends on the inputs.",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"The function will usually be a ",(0,i.mdx)("inlineCode",{parentName:"li"},"def"),", as ",(0,i.mdx)("inlineCode",{parentName:"li"},"lambda")," in Starlark does not allow statements, making it quite underpowered.")))),(0,i.mdx)("p",null,"Following is an example of using the function to determine Erlang BEAM dependencies:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def erlang(ctx):\n  beams = {}\n  for x in ctx.attr.srcs:\n    dep_file = ctx.actions.declare_output(x + ".out")\n    ctx.actions.run("erl", "-dump-output", x, dep_file.as_output())\n    beam_file = ctx.actions.declare_output(x + ".beam")\n    beams[x] = beam_file\n    def f(ctx, artifacts, outputs, x=x, dep_file=dep_file):\n      deps = artifacts[dep_file].read_lines()\n      ctx.actions.run(\n        "erl", "-comp", x,\n        [beams[d] for d in deps],\n        outputs[beams[x]].as_output()\n      )\n    ctx.actions.dynamic_output([dep_file], [x] + deps, [beam_file], f)\n  return [ErlangInfo(objects = beams.values())]\n')),(0,i.mdx)("p",null,"The above code uses ",(0,i.mdx)("inlineCode",{parentName:"p"},"declare_output")," for the ",(0,i.mdx)("inlineCode",{parentName:"p"},"beam_file")," then binds it within the function ",(0,i.mdx)("inlineCode",{parentName:"p"},"f"),", after having read the ",(0,i.mdx)("inlineCode",{parentName:"p"},"dep_file")," with ",(0,i.mdx)("inlineCode",{parentName:"p"},"read_lines"),"."))}p.isMDXComponent=!0}}]);