"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7836],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>c,MDXProvider:()=>m,mdx:()=>h,useMDXComponents:()=>p,withMDXComponents:()=>u});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o.apply(this,arguments)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),u=function(e){return function(t){var r=p(t.components);return n.createElement(e,o({},t,{components:r}))}},p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},m=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},f="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,f=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(f,l(l({ref:t},c),{},{components:r})):n.createElement(f,l({ref:t},c))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[f]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},86393:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const o={},i="APIs",l={unversionedId:"api",id:"api",title:"APIs",description:"A lot of Buck2 is driven by Starlark APIs. While there is a Starlark specification, for most purposes it can be considered a subset of Python. There are three main places you can write Starlark in Buck2:",source:"@site/../docs/api.md",sourceDirName:".",slug:"/api",permalink:"/docs/api",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"manualSidebar",previous:{title:"Windows Cheat Sheet",permalink:"/docs/developers/windows_cheat_sheet"},next:{title:"Rules",permalink:"/docs/api/rules"}},s={},c=[],u={toc:c};function p(e){let{components:t,...r}=e;return(0,a.mdx)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"apis"},"APIs"),(0,a.mdx)("p",null,"A lot of Buck2 is driven by Starlark APIs. While there is a ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/bazelbuild/starlark/blob/master/spec.md"},"Starlark specification"),", for most purposes it can be considered a subset of Python. There are three main places you can write Starlark in Buck2:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"In ",(0,a.mdx)("inlineCode",{parentName:"li"},"BUCK")," files, where you can define the rules. The most interesting functions are ",(0,a.mdx)("a",{parentName:"li",href:"rules"},"the rules themselves"),", but you will often use the ",(0,a.mdx)("a",{parentName:"li",href:"starlark/globals"},"builtin Starlark functions")," (most of which are the same as in Python), and a few of the ",(0,a.mdx)("a",{parentName:"li",href:"build/globals"},"build functions")," (e.g. ",(0,a.mdx)("inlineCode",{parentName:"li"},"glob"),")."),(0,a.mdx)("li",{parentName:"ul"},"In rule definitions, where you can use the same Starlark standard functions, but will heavily be using the ",(0,a.mdx)("a",{parentName:"li",href:"build/globals"},"build functions")," (e.g. ",(0,a.mdx)("inlineCode",{parentName:"li"},"rule")," and ",(0,a.mdx)("inlineCode",{parentName:"li"},"attrs"),")."),(0,a.mdx)("li",{parentName:"ul"},"In ",(0,a.mdx)("a",{parentName:"li",href:"../developers/bxl"},"BXL"),", where the ",(0,a.mdx)("a",{parentName:"li",href:"bxl/bxl_ctx"},"context type")," is one of the more important ones.")))}p.isMDXComponent=!0}}]);